<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ICP计算加速</title>
    <url>/2021/12/05/ICP%E8%AE%A1%E7%AE%97%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="icp加速"><a class="markdownIt-Anchor" href="#icp加速"></a> ICP加速</h1>
<p>由于要求使用python，因此需要特别关注如何让ICP计算的更快，通过以下方案加快ICP计算并成功加速约20倍。</p>
<h3 id="kdtree"><a class="markdownIt-Anchor" href="#kdtree"></a> KDTree</h3>
<h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4>
<p>用处：加速icp激光点匹配</p>
<span id="more"></span>
<p>scipy中的类，概念见<a href="https://www.cnblogs.com/2Bthebest1/p/10909005.html">KdTree</a>，api见<a href="https://docs.scipy.org/doc/scipy/reference/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree">scipy.spatial.KDTree</a>。推荐使用cKDTree（底层为c++)，速度相比KDTree得到大幅提升。</p>
<h4 id="遇到的一些小问题"><a class="markdownIt-Anchor" href="#遇到的一些小问题"></a> 遇到的一些小问题</h4>
<p>在向KDTRee传递数据时，由于传入的雷达点云数据中包含NaN数据项，因此程序会提示错误。通过观察数据我发现传入的数据显然是具有一定函数关系的（雷达扫描的是平面，因此值在一定程度上是线性的）。</p>
<center>
    <figure class="half">
        <img src="/images/ICP计算加速/sendpix9.jpg" width=450 height=100>
        <img src="/images/ICP计算加速/sendpix10.jpg" width=450 height=100>
    </figure>
    部分数据
</center>
因此一个很朴素的想法是通过线性插值补全NaN项。结果很理想。
<h3 id="提取角点"><a class="markdownIt-Anchor" href="#提取角点"></a> 提取角点</h3>
<h4 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h4>
<p>由于需要尽可能减少运算次数，因此提取角点方法较简单。<br />
通过对正在检测点的前N项与后N项同时求取平均x、y得到两个平均点。此时我们就有三个点（检测点，前N项构成的平均点，后N项构成的平均点），这三个点构成一个三角形，通过简单的数学计算得到检测点所在角的sin值作为比较的参考，我让它等于f。<br />
按照顺序选取所有点中f最大的点作为角点，得到新的数据。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msub><mo stretchy="false">)</mo><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mo>−</mo><mi>N</mi></mrow><mn>0</mn></munderover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msub><mo stretchy="false">)</mo><mi>i</mi></msub><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msub><mo stretchy="false">)</mo><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mn>0</mn><mi>N</mi></munderover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msub><mo stretchy="false">)</mo><mi>i</mi></msub><mspace linebreak="newline"></mspace><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><msub><mi>y</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt><mspace linebreak="newline"></mspace><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><msub><mi>y</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt><mspace linebreak="newline"></mspace><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt><mspace linebreak="newline"></mspace><mi>l</mi><mo>=</mo><mfrac><mrow><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mo>+</mo><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>+</mo><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub></mrow><mn>2</mn></mfrac><mspace linebreak="newline"></mspace><mi>f</mi><mo>=</mo><mfrac><msqrt><mrow><mi>l</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo></mrow></msqrt><mrow><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mo>∗</mo><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">(x,y)_{prev}=\sum^0_{-N}(x,y)_{i},    (x,y)_{next}=\sum^N_{0}(x,y)_{i}\\
l_{prev}=\sqrt{(x-x_{prev})^2+(y-y_{prev})^2}\\
l_{next}=\sqrt{(x-x_{next})^2+(y-y_{next})^2}\\
l_{prev\_next}=\sqrt{(x_{next}-x_{prev})^2+(y_{next}-y_{prev})^2}\\
l=\frac{l_{prev}+l_{next}+l_{prev\_next}}{2}\\
f=\frac{\sqrt{l*(l-l_{prev})*(l-l_{next})*(l-l_{prev\_next})}}{l_{prev}*l_{next}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1537800000000002em;vertical-align:-1.352667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.801113em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.352667em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0954490000000003em;vertical-align:-1.267113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.574179em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.265821em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.225821em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.574179em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.25612499999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.983875em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9438750000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25612499999999994em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.06144em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.574179em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.265821em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.225821em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.574179em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.13744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4514399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.757em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2021080000000004em;vertical-align:-0.972108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2300000000000004em;"><span style="top:-2.4905em;"><span class="pstrut" style="height:3.1765em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.4065em;"><span class="pstrut" style="height:3.1765em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.23em;"><span class="pstrut" style="height:3.1765em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1765em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.1365em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6635em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h4 id="遇到的一些小问题-2"><a class="markdownIt-Anchor" href="#遇到的一些小问题-2"></a> 遇到的一些小问题</h4>
<h5 id="三个点无法构成三角形"><a class="markdownIt-Anchor" href="#三个点无法构成三角形"></a> 三个点无法构成三角形</h5>
<p>计算数值精度出现的一些问题，当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">l_{prev}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">l_{next}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中某一项趋近于0时，会出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi></mrow></msub><mi mathvariant="normal">、</mi><msub><mi>l</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">、</mi><msub><mi>l</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">l_{prev}、l_{next}、l_{prev\_next}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06144em;vertical-align:-0.367em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.367em;"><span></span></span></span></span></span></span></span></span></span>无法构成三角形的情况。只需判断一下能否构成三角形即可，不能则直接返回0。</p>
<h5 id="如何快速找到f最大的n项数据"><a class="markdownIt-Anchor" href="#如何快速找到f最大的n项数据"></a> 如何快速找到f最大的N项数据</h5>
<p>一个显然的想法是先根据f大小进行排序，通过循环查找只会让程序的执行时间变长。但是python的排序似乎只能传入单维的数据，例如传入{3,5,21,6,4}，然后返回{3,4,5,6,21}。但是这样对点云数据排序会导致我找不到对应点。我们需要传入一个二维的np矩阵，在第一行存储每个点的f，第二行存储每个点的索引。这样在对f进行排序的同时，索引会随着f被排到相同位置，我们才能找到对应的点。</p>
<p>因此我使用了heapq，通过lambda表达式限定依据第一行数据进行排序，这样我们便能快速的找到f最大的N项数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heapq.nlargest(corner_num, <span class="built_in">list</span>, <span class="keyword">lambda</span> x:x[<span class="number">0</span>])	</span><br><span class="line"><span class="comment">#corner_num为期望返回的长度</span></span><br><span class="line"><span class="comment">#list为传入矩阵</span></span><br><span class="line"><span class="comment">#lambda x:x[0]限定比较参数为list[i][0],为f值</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Robotics</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJU OS Lab0:GDB + QEMU 调试 64 位 RISC-V LINUX</title>
    <url>/2021/12/05/Lab0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-实验目的"><a class="markdownIt-Anchor" href="#1-实验目的"></a> 1 实验目的</h2>
<ul>
<li>了解容器的使用</li>
<li>使用交叉编译工具, 完成Linux内核代码编译</li>
<li>使用QEMU运行内核</li>
<li>熟悉GDB和QEMU联合调试</li>
</ul>
<span id="more"></span>
<h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2>
<ul>
<li>Docker</li>
<li>实验环境镜像<a href="https://pan.zju.edu.cn/share/ded28f6f578c955bfe94b79192">下载地址</a></li>
</ul>
<h2 id="3-实验基础知识介绍"><a class="markdownIt-Anchor" href="#3-实验基础知识介绍"></a> 3 实验基础知识介绍</h2>
<h3 id="31-linux-使用基础"><a class="markdownIt-Anchor" href="#31-linux-使用基础"></a> 3.1 Linux 使用基础</h3>
<p>在Linux环境下，人们通常使用命令行接口来完成与计算机的交互。终端（Terminal）是用于处理该过程的一个应用程序，通过终端你可以运行各种程序以及在自己的计算机上处理文件。在类Unix的操作系统上，终端可以为你完成一切你所需要的操作。下面我们仅对实验中涉及的一些概念进行介绍，你可以通过下面的链接来对命令行的使用进行学习：</p>
<ol>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools">The Missing Semester of Your CS Education</a><a href="https://www.bilibili.com/video/BV1x7411H7wa?p=2">&gt;&gt;Video&lt;&lt;</a></li>
<li><a href="https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/index.html">GNU/Linux Command-Line Tools Summary</a></li>
<li><a href="https://github.com/berkeley-scf/tutorial-unix-basics">Basics of UNIX</a></li>
</ol>
<h3 id="32-docker-使用基础"><a class="markdownIt-Anchor" href="#32-docker-使用基础"></a> 3.2 Docker 使用基础</h3>
<h4 id="docker-基本介绍"><a class="markdownIt-Anchor" href="#docker-基本介绍"></a> Docker 基本介绍</h4>
<p>Docker 是一种利用容器（container）来进行创建、部署和运行应用的工具。Docker把一个应用程序运行需要的二进制文件、运行需要的库以及其他依赖文件打包为一个包（package），然后通过该包创建容器并运行，由此被打包的应用便成功运行在了Docker容器中。之所以要把应用程序打包，并以容器的方式运行，主要是因为在生产开发环境中，常常会遇到应用程序和系统环境变量以及一些依赖的库文件不匹配，导致应用无法正常运行的问题。Docker带来的好处是只要我们将应用程序打包完成（组装成为Docker imgae），在任意安装了Docker的机器上，都可以通过运行容器的方式来运行该应用程序，因而将依赖、环境变量等带来的应用部署问题解决了。</p>
<p>如果想了解更多 Docker 的详情，请参考<a href="https://www.docker.com/">官网</a>。</p>
<h4 id="docker-安装"><a class="markdownIt-Anchor" href="#docker-安装"></a> Docker 安装</h4>
<p>请根据 <a href="https://docs.docker.com/get-docker">https://docs.docker.com/get-docker</a> 自行在本机安装 Docker 环境。你可以从 <a href="#2">2 实验环境</a> 中获得实验所需的环境，我们已经为你准备好了 RISC-V 工具链，以及 QEMU 模拟器，使用方法请参见 <a href="#4">4 实验步骤</a>。</p>
<h3 id="33-qemu-使用基础"><a class="markdownIt-Anchor" href="#33-qemu-使用基础"></a> 3.3 QEMU 使用基础</h3>
<h4 id="什么是qemu"><a class="markdownIt-Anchor" href="#什么是qemu"></a> 什么是QEMU</h4>
<p>QEMU 是一个功能强大的模拟器，可以在 x86 平台上执行不同架构下的程序。我们实验中采用 QEMU 来完成 RISC-V 架构的程序的模拟。</p>
<h4 id="如何使用-qemu常见参数介绍"><a class="markdownIt-Anchor" href="#如何使用-qemu常见参数介绍"></a> 如何使用 QEMU（常见参数介绍）</h4>
<p>以以下命令为例，我们简单介绍 QEMU 的参数所代表的含义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-system-riscv64 \</span><br><span class="line">    -nographic \</span><br><span class="line">    -machine virt \</span><br><span class="line">    -kernel path/to/linux/arch/riscv/boot/Image \</span><br><span class="line">    -device virtio-blk-device,drive=hd0 \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/vda ro console=ttyS0&quot;</span> \</span><br><span class="line">    -bios default \</span><br><span class="line">    -drive file=rootfs.img,format=raw,id=hd0 \</span><br><span class="line">    -S -s</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-nographic</code>: 不使用图形窗口，使用命令行</li>
<li><code>-machine</code>: 指定要emulate的机器，可以通过命令 <code>qemu-system-riscv64 -machine help</code>查看可选择的机器选项</li>
<li><code>-kernel</code>: 指定内核image</li>
<li><code>-append cmdline</code>: 使用cmdline作为内核的命令行</li>
<li><code>-device</code>: 指定要模拟的设备，可以通过命令 <code>qemu-system-riscv64 -device help</code> 查看可选择的设备，通过命令 <code>qemu-system-riscv64 -device &lt;具体的设备&gt;,help</code> 查看某个设备的命令选项</li>
<li><code>-drive, file=&lt;file_name&gt;</code>: 使用 <code>file_name</code> 作为文件系统</li>
<li><code>-S</code>: 启动时暂停CPU执行</li>
<li><code>-s</code>: -gdb tcp::1234 的简写</li>
<li><code>-bios default</code>: 使用默认的 OpenSBI firmware 作为 bootloader</li>
</ul>
<p>更多参数信息可以参考<a href="https://www.qemu.org/docs/master/system/index.html">这里</a></p>
<h3 id="34-gdb-使用基础"><a class="markdownIt-Anchor" href="#34-gdb-使用基础"></a> 3.4 GDB 使用基础</h3>
<h4 id="什么是-gdb"><a class="markdownIt-Anchor" href="#什么是-gdb"></a> 什么是 GDB</h4>
<p>GNU 调试器（英语：GNU Debugger，缩写：gdb）是一个由 GNU 开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。借助调试器，我们能够查看另一个程序在执行时实际在做什么（比如访问哪些内存、寄存器），在其他程序崩溃的时候可以比较快速地了解导致程序崩溃的原因。<br />
被调试的程序可以是和gdb在同一台机器上（本地调试，or native debug），也可以是不同机器上（远程调试， or remote debug）。</p>
<p>总的来说，gdb可以有以下4个功能：</p>
<ul>
<li>启动程序，并指定可能影响其行为的所有内容</li>
<li>使程序在指定条件下停止</li>
<li>检查程序停止时发生了什么</li>
<li>更改程序中的内容，以便纠正一个bug的影响</li>
</ul>
<h4 id="gdb-基本命令介绍"><a class="markdownIt-Anchor" href="#gdb-基本命令介绍"></a> GDB 基本命令介绍</h4>
<ul>
<li>(gdb) layout asm: 显示汇编代码</li>
<li>(gdb) start: 单步执行，运行程序，停在第一执行语句</li>
<li>(gdb) continue: 从断点后继续执行，简写 <code>c</code></li>
<li>(gdb) next: 单步调试（逐过程，函数直接执行），简写 <code>n</code></li>
<li>(gdb) step instruction: 执行单条指令，简写 <code>si</code></li>
<li>(gdb) run: 重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件），简写 <code>r</code></li>
<li>(gdb) backtrace：查看函数的调用的栈帧和层级关系，简写 <code>bt</code></li>
<li>(gdb) break 设置断点，简写 <code>b</code>
<ul>
<li>断在 <code>foo</code> 函数：<code>b foo</code></li>
<li>断在某地址: <code>b * 0x80200000</code></li>
</ul>
</li>
<li>(gdb) finish: 结束当前函数，返回到函数调用点</li>
<li>(gdb) frame: 切换函数的栈帧，简写 <code>f</code></li>
<li>(gdb) print: 打印值及地址，简写 <code>p</code></li>
<li>(gdb) info：查看函数内部局部变量的数值，简写 <code>i</code>
<ul>
<li>查看寄存器 ra 的值：<code>i r ra</code></li>
</ul>
</li>
<li>(gdb) display：追踪查看具体变量值</li>
<li>(gdb) <code>x/4x &lt;addr&gt;</code>: 以 16 进制打印 <code>&lt;addr&gt;</code> 处开始的 16 Bytes 内容</li>
</ul>
<p>更多命令可以参考<a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/">100个gdb小技巧</a></p>
<h3 id="35-linux-内核编译基础"><a class="markdownIt-Anchor" href="#35-linux-内核编译基础"></a> 3.5 Linux 内核编译基础</h3>
<h4 id="交叉编译"><a class="markdownIt-Anchor" href="#交叉编译"></a> 交叉编译</h4>
<p>交叉编译指的是在一个平台上编译可以在另一个架构运行的程序。例如在 x86 机器上编译可以在 RISC-V 架构运行的程序，交叉编译需要交叉编译工具链的支持，在我们的实验中所用的交叉编译工具链就是 <code>riscv-gnu-toolchain</code>。</p>
<h4 id="内核配置"><a class="markdownIt-Anchor" href="#内核配置"></a> 内核配置</h4>
<p>内核配置是用于配置是否启用内核的各项特性，内核会提供一个名为 <code>defconfig</code> (即default configuration) 的默认配置，该配置文件位于各个架构目录的 <code>configs</code> 文件夹下，例如对于RISC-V而言，其默认配置文件为 <code>arch/riscv/configs/defconfig</code>。使用 <code>make ARCH=riscv defconfig</code> 命令可以在内核根目录下生成一个名为 <code>.config</code> 的文件，包含了内核完整的配置，内核在编译时会根据 <code>.config</code> 进行编译。配置之间存在相互的依赖关系，直接修改defconfig文件或者 <code>.config</code> 有时候并不能达到想要的效果。因此如果需要修改配置一般采用 <code>make ARCH=riscv menuconfig</code> 的方式对内核进行配置。</p>
<h4 id="常见参数"><a class="markdownIt-Anchor" href="#常见参数"></a> 常见参数</h4>
<ul>
<li><code>ARCH</code> 指定架构，可选的值包括arch目录下的文件夹名，如 x86、arm、arm64 等，不同于 arm 和 arm64，32 位和 64 位的RISC-V共用 <code>arch/riscv</code> 目录，通过使用不同的 config 可以编译 32 位或 64 位的内核。</li>
<li><code>CROSS_COMPILE</code> 指定使用的交叉编译工具链，例如指定 <code>CROSS_COMPILE=riscv64-unknown-linux-gnu-</code>，则编译时会采用 <code>riscv64-unknown-linux-gnu-gcc</code> 作为编译器，编译可以在 RISC-V 64 位平台上运行的 kernel。</li>
</ul>
<h4 id="常用的-linux-下的编译选项"><a class="markdownIt-Anchor" href="#常用的-linux-下的编译选项"></a> 常用的 Linux 下的编译选项</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make <span class="built_in">help</span>         <span class="comment"># 查看make命令的各种参数解释</span></span><br><span class="line"></span><br><span class="line">$ make defconfig    <span class="comment"># 使用当前平台的默认配置，在x86机器上会使用x86的默认配置</span></span><br><span class="line">$ make -j           <span class="comment"># 编译当前平台的内核，-j 为以全部机器硬件线程数进行多线程编译</span></span><br><span class="line">$ make -j4          <span class="comment"># 编译当前平台的内核，-j 为使用 4 线程进行多线程编译</span></span><br><span class="line"></span><br><span class="line">$ make ARCH=riscv defconfig                             <span class="comment"># 使用 RISC-V 平台的默认配置</span></span><br><span class="line">$ make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- -j   <span class="comment"># 编译 RISC-V 平台内核</span></span><br><span class="line"></span><br><span class="line">$ make clean        <span class="comment"># 清除所有编译好的 object 文件</span></span><br></pre></td></tr></table></figure>
<h2 id="4-实验步骤"><a class="markdownIt-Anchor" href="#4-实验步骤"></a> 4 实验步骤</h2>
<p><strong>在执行每一条命令前，请你对将要进行的操作进行思考，给出的命令不需要全部执行，并且不是所有的命令都可以无条件执行，请不要直接复制粘贴命令去执行。</strong></p>
<h3 id="41-搭建-docker-环境"><a class="markdownIt-Anchor" href="#41-搭建-docker-环境"></a> 4.1 搭建 Docker 环境</h3>
<p>请根据 <strong>3.2 Docker 使用基础</strong> 安装 Docker 环境。然后<strong>参考并理解</strong>以下步骤，导入我们已经准备好的 Docker 镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入docker镜像</span></span><br><span class="line">$ cat oslab.tar | docker import - oslab:2021</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker镜像</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">oslab        latest    b2b39a3bcd81   404 days ago   3.62GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从镜像创建一个容器</span></span><br><span class="line">$ docker run --name oslab -it oslab:2021 bash   <span class="comment"># --name:容器名称 -i:交互式操作 -t:终端</span></span><br><span class="line">root@132a140bd724:/<span class="comment">#                            # 提示符变为 &#x27;#&#x27; 表明成功进入容器 后面的字符串根据容器而生成，为容器id</span></span><br><span class="line">root@132a140bd724:/<span class="comment"># exit (or CTRL+D)           # 从容器中退出 此时运行docker ps，运行容器的列表为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动处于停止状态的容器</span></span><br><span class="line">$ docker start oslab        <span class="comment"># oslab为容器名称</span></span><br><span class="line">$ docker ps                 <span class="comment"># 可看到容器已经启动</span></span><br><span class="line">CONTAINER ID   IMAGE        COMMAND       CREATED              STATUS        PORTS     NAMES</span><br><span class="line">132a140bd724   oslab:2021   <span class="string">&quot;bash&quot;</span>        About a minute ago   Up 1 second             oslab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从终端连入 docker 容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it oslab bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line"><span class="comment"># 把用户的 home 目录映射到 docker 镜像内的 have-fun-debugging 目录</span></span><br><span class="line">$ docker run --name oslab -it -v <span class="variable">$&#123;HOME&#125;</span>:/have-fun-debugging oslab:2021 bash    <span class="comment"># -v 本地目录:容器内目录</span></span><br></pre></td></tr></table></figure>
<h3 id="42-获取-linux-源码和已经编译好的文件系统"><a class="markdownIt-Anchor" href="#42-获取-linux-源码和已经编译好的文件系统"></a> 4.2 获取 Linux 源码和已经编译好的文件系统</h3>
<p>从 <a href="https://www.kernel.org">https://www.kernel.org</a> 下载最新的 Linux 源码。同时在 <a href="https://gitee.com/zjusec/os21fall">repo</a> 中已经准备好了根文件系统的镜像。</p>
<blockquote>
<p>根文件系统为 Linux Kenrel 提供了基础的文件服务，在启动 Linux Kernel 时是必要的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/zju_xiayingjie/os21fall-stu</span><br><span class="line">$ <span class="built_in">cd</span> os21fall-stu/src/lab0</span><br><span class="line">$ ls</span><br><span class="line">rootfs.img  <span class="comment"># 已经构建完成的根文件系统的镜像</span></span><br></pre></td></tr></table></figure>
<h3 id="43-编译-linux-内核"><a class="markdownIt-Anchor" href="#43-编译-linux-内核"></a> 4.3 编译 linux 内核</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">path/to/lab0/linux</span><br><span class="line">$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig    <span class="comment"># 生成配置</span></span><br><span class="line">$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j<span class="variable">$&#123;nproc&#125;</span>           <span class="comment"># 编译</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用多线程编译一般会耗费大量内存，如果 <code>-j</code> 选项导致内存耗尽 (out of memory)，请尝试调低线程数，比如 <code>-j4</code>, <code>-j8</code> 等。</p>
</blockquote>
<h3 id="44-使用qemu运行内核"><a class="markdownIt-Anchor" href="#44-使用qemu运行内核"></a> 4.4 使用QEMU运行内核</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \</span><br><span class="line">    -device virtio-blk-device,drive=hd0 -append <span class="string">&quot;root=/dev/vda ro console=ttyS0&quot;</span> \</span><br><span class="line">    -bios default -drive file=rootfs.img,format=raw,id=hd0</span><br></pre></td></tr></table></figure>
<p>退出 QEMU 的方法为：使用 Ctrl+A，<strong>松开</strong>后再按下 X 键即可退出 QEMU。</p>
<h3 id="45-使用-gdb-对内核进行调试"><a class="markdownIt-Anchor" href="#45-使用-gdb-对内核进行调试"></a> 4.5 使用 GDB 对内核进行调试</h3>
<p>这一步需要开启两个 Terminal Session，一个 Terminal 使用 QEMU 启动 Linux，另一个 Terminal 使用 GDB 与 QEMU 远程通信进行调试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Terminal 1</span></span><br><span class="line">$ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \</span><br><span class="line">    -device virtio-blk-device,drive=hd0 -append <span class="string">&quot;root=/dev/vda ro console=ttyS0&quot;</span> \</span><br><span class="line">    -bios default -drive file=rootfs.img,format=raw,id=hd0 -S -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Terminal 2</span></span><br><span class="line">$ riscv64-unknown-linux-gnu-gdb path/to/linux/vmlinux</span><br><span class="line">(gdb) target remote :1234   <span class="comment"># 连接 qemu</span></span><br><span class="line">(gdb) b start_kernel        <span class="comment"># 设置断点</span></span><br><span class="line">(gdb) <span class="built_in">continue</span>              <span class="comment"># 继续执行</span></span><br><span class="line">(gdb) quit                  <span class="comment"># 退出 gdb</span></span><br></pre></td></tr></table></figure>
<h2 id="5-实验任务与要求"><a class="markdownIt-Anchor" href="#5-实验任务与要求"></a> 5 实验任务与要求</h2>
<ul>
<li>请各位同学独立完成作业，任何抄袭行为都将使本次作业判为0分。</li>
<li>编译内核并用 GDB + QEMU 调试，在内核初始化过程中设置断点，对内核的启动过程进行跟踪，并尝试使用gdb的各项命令（如backtrace、finish、frame、info、break、display、next、layout等）。</li>
<li>在学在浙大中提交 pdf 格式的实验报告，记录实验过程并截图（4.1-4.4）.，对每一步的命令以及结果进行必要的解释，记录遇到的问题和心得体会。</li>
</ul>
<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<ol>
<li>使用 <code>riscv64-unknown-elf-gcc</code> 编译单个 <code>.c</code> 文件</li>
<li>使用 <code>riscv64-unknown-elf-objdump</code> 反汇编 1 中得到的编译产物</li>
<li>调试 Linux 时:
<ol>
<li>在 GDB 中查看汇编代码</li>
<li>在 0x80000000 处下断点</li>
<li>查看所有已下的断点</li>
<li>在 0x80200000 处下断点</li>
<li>清除 0x80000000 处的断点</li>
<li>继续运行直到触发 0x80200000 处的断点</li>
<li>单步调试一次</li>
<li>退出 QEMU</li>
</ol>
</li>
<li>使用 <code>make</code> 工具清除 Linux 的构建产物</li>
<li><code>vmlinux</code> 和 <code>Image</code> 的关系和区别是什么？</li>
</ol>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJU OS Lab2:RV64 时钟中断处理</title>
    <url>/2021/12/05/Lab2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-实验目的"><a class="markdownIt-Anchor" href="#1-实验目的"></a> 1 实验目的</h2>
<ul>
<li>学习 RISC-V 的异常处理相关寄存器与指令，完成对异常处理的初始化。</li>
<li>理解 CPU 上下文切换机制，并正确实现上下文切换功能。</li>
<li>编写异常处理函数，完成对特定异常的处理。</li>
<li>调用 OpenSBI 提供的接口，完成对时钟中断事件的设置。</li>
</ul>
<span id="more"></span>
<h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2>
<ul>
<li>Docker in Lab0</li>
</ul>
<h2 id="3-背景知识"><a class="markdownIt-Anchor" href="#3-背景知识"></a> 3 背景知识</h2>
<h3 id="30-前言"><a class="markdownIt-Anchor" href="#30-前言"></a> 3.0 前言</h3>
<p>在 <code>lab1</code> 中我们成功的将一个最简单的 OS 启动起来， 但还没有办法与之交互。我们在课程中讲过操作系统启动之后由<strong>事件</strong>（<code>event</code>）驱动，在本次实验中我们将引入一种重要的事件 <strong>异常</strong>， 异常给了 OS 与硬件、软件交互的能力。在 <code>lab1</code> 中我们介绍了在 RISC-V 中有三种特权级 ( M 态、 S 态、 U 态 )， 在Boot阶段， OpenSBI 已经帮我们将 M 态的异常处理进行了初始化，这一部分不需要我们再去实现，因此本次试验我们重点关注 S 态的异常处理。</p>
<h3 id="31-risc-v-中的-interrupt-和-exception"><a class="markdownIt-Anchor" href="#31-risc-v-中的-interrupt-和-exception"></a> 3.1 RISC-V 中的 Interrupt 和 Exception</h3>
<h4 id="311-什么是-interrupt-和-exception"><a class="markdownIt-Anchor" href="#311-什么是-interrupt-和-exception"></a> 3.1.1 什么是 Interrupt 和 Exception</h4>
<blockquote>
<p>We use the term <strong>exception</strong> to refer to an unusual condition occurring at run time <strong>associated with an instruction</strong> in the current RISC-V hart. We use the term <strong>interrupt</strong> to refer to an <strong>external asynchronous event</strong> that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term <strong>trap</strong> to refer to <strong>the transfer of control to a trap handler</strong> caused by either an exception or an interrupt.</p>
</blockquote>
<p>上述是 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf">RISC-V Unprivileged Spec</a> 1.6 节中对于 <code>Trap</code>、 <code>Interrupt</code> 与 <code>Exception</code> 的描述。总结起来 <code>Interrupt</code> 与 <code>Exception</code> 的主要区别如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Interrupt</th>
<th style="text-align:left">Exception</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Hardware generate</td>
<td style="text-align:left">Software generate</td>
</tr>
<tr>
<td style="text-align:left">These are <strong>asynchronous external requests</strong> for service (like keyboard or printer needs service).</td>
<td style="text-align:left">These are <strong>synchronous internal requests</strong> for service based upon abnormal events (think of illegal instructions, illegal address, overflow etc).</td>
</tr>
<tr>
<td style="text-align:left">These are <strong>normal events</strong> and shouldn’t interfere with the normal running of a computer.</td>
<td style="text-align:left">These are <strong>abnormal events</strong> and often result in the termination of a program</td>
</tr>
</tbody>
</table>
<p>上文中的 <code>Trap</code> 描述的是一种控制转移的过程, 这个过程是由 <code>Interrupt</code> 或者 <code>Exception</code> 引起的。这里为了方便起见，我们在这里约定 <code>Trap</code> 为 <code>Interrput</code> 与 <code>Exception</code> 的总称。</p>
<blockquote>
<p>在下文中 我们用 <strong>异常</strong> 代指 <strong>Trap</strong></p>
</blockquote>
<h4 id="312-相关寄存器"><a class="markdownIt-Anchor" href="#312-相关寄存器"></a> 3.1.2 相关寄存器</h4>
<p>除了32个通用寄存器之外，RISC-V 架构还有大量的 <strong>控制状态寄存器</strong> <code>Control and Status Registers(CSRs)</code>，下面将介绍几个和异常机制相关的重要寄存器。</p>
<p>Supervisor Mode 异常相关寄寄存器:</p>
<ul>
<li><code>sstatus</code> ( Supervisor Status Register )中存在一个 SIE ( Supervisor Interrupt Enable ) 比特位，当该比特位设置为 1 时，会对所有的 S 态异常<strong>响应</strong>， 否则将会禁用所有 S 态异常。</li>
<li><code>sie</code> ( Supervisor Interrupt Eable Register )。在 RISC-V 中，<code>Interrupt</code> 被划分为三类 <code>Software Interrupt</code>， <code>Timer Interrupt</code>， <code>External Interrupt</code>。在开启了 <code>sstatus[SIE]</code>之后，系统会根据 <code>sie</code> 中的相关比特位来决定是否对该 <code>Interrupt</code> 进行<strong>处理</strong>。</li>
<li><code>stvec</code> ( Supervisor Trap Vector Base Address Register ) 即所谓的”中断向量表基址”。 <code>stvec</code> 有两种模式：<code>Direct 模式</code>，适用于系统中只有一个中断处理程序, 其指向中断处理入口函数 （ 本次实验中我们所用的模式 ）。<code>Vectored 模式</code>，指向中断向量表， 适用于系统中有多个中断处理程序 （ 该模式可以参考<a href="https://elixir.bootlin.com/linux/latest/source/arch/riscv/kernel/entry.S#L564"> RISC-V 内核源码</a> ）。</li>
<li><code>scause</code> ( Supervisor Cause Register ), 会记录异常发生的原因，还会记录该异常是 <code>Interrupt</code> 还是 <code>Exception</code>。</li>
<li><code>sepc</code> ( Supervisor Exception Program Counter ), 会记录触发异常的那条指令的地址。</li>
</ul>
<p>Machine Mode 异常相关寄寄存器:</p>
<ul>
<li>类似于 Supervisor Mode， Machine Mode 也有相对应的寄存器，但由于本实验同学不需要操作这些寄存器，故不在此作介绍。</li>
</ul>
<p>以上寄存器的详细介绍请同学们参考 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMFDQC-and-Priv-v1.11/riscv-privileged-20190608.pdf">RISC-V Privileged Spec</a></p>
<h4 id="313-相关特权指令"><a class="markdownIt-Anchor" href="#313-相关特权指令"></a> 3.1.3 相关特权指令</h4>
<ul>
<li><code>ecall</code> ( Environment Call )，当我们在 S 态执行这条指令时，会触发一个 <code>ecall-from-s-mode-exception</code>，从而进入 M 模式中的中断处理流程( 如设置定时器等 )；当我们在 U 态执行这条指令时，会触发一个 <code>ecall-from-u-mode-exception</code>，从而进入 S 模式中的中断处理流程 ( 常用来进行系统调用 )。</li>
<li><code>sret</code> 用于 S 态异常返回, 通过 <code>sepc</code> 来设置 <code>pc</code> 的值， 返回到之前程序继续运行。</li>
</ul>
<p>以上指令的详细介绍请同学们参考 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMFDQC-and-Priv-v1.11/riscv-privileged-20190608.pdf">RISC-V Privileged Spec</a></p>
<h3 id="32-上下文处理"><a class="markdownIt-Anchor" href="#32-上下文处理"></a> 3.2 上下文处理</h3>
<p>由于在处理异常时，有可能会改变系统的状态。所以在真正处理异常之前，我们有必要对系统的当前状态进行保存，在异常处理完成之后，我们再将系统恢复至原先的状态，就可以确保之前的程序继续正常运行。<br />
这里的系统状态通常是指寄存器，这些寄存器也叫做CPU的上下文 ( <code>Context</code> ).</p>
<h3 id="33-异常处理程序"><a class="markdownIt-Anchor" href="#33-异常处理程序"></a> 3.3 异常处理程序</h3>
<p>异常处理程序根据 <code>scause</code> 的值， 进入不同的处理逻辑，在本次试验中我们需要关心的只有 <code>Superviosr Timer Interrupt</code> 。</p>
<h3 id="34-时钟中断"><a class="markdownIt-Anchor" href="#34-时钟中断"></a> 3.4 时钟中断</h3>
<p>时钟中断需要 CPU 硬件的支持。CPU 以&quot;时钟周期&quot;为工作的基本时间单位，对逻辑门的时序电路进行同步。而时钟中断实际上就是“每隔若干个时钟周期执行一次的程序”。下面介绍与时钟中断相关的寄存器以及如何产生时钟中断。</p>
<ul>
<li><code>mtime</code> 与 <code>mtimecmp</code> ( Machine Timer Register )。 <code>mtime</code> 是一个实时计时器， 由硬件以恒定的频率自增。<code>mtimecmp</code> 中保存着下一次时钟中断发生的时间点，当 <code>mtime</code> 的值大于或等于 <code>mtimecmp</code> 的值，系统就会触发一次时钟中断。因此我们只需要更新 <code>mtimecmp</code> 中的值，就可以设置下一次时钟中断的触发点。 <code>OpenSBI</code> 已经为我们提供了更新 <code>mtimecmp</code> 的接口 <code>sbi_set_timer</code> ( 见 <code>lab1</code> 4.4节 )。</li>
<li><code>mcounteren</code> ( Counter-Enable Registers )。由于 <code>mtime</code> 是属于 M 态的寄存器，我们在 S 态无法直接对其读写， 幸运的是 OpenSBI 在 M 态已经通过设置 <code>mcounteren</code> 寄存器的 <code>TM</code> 比特位， 让我们可以在 S 态中可以通过 <code>time</code> 这个<strong>只读</strong>寄存器读取到 <code>mtime</code>的当前值，相关汇编指令是 <code>rdtime</code>。</li>
</ul>
<p>以上寄存器的详细介绍请同学们参考 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMFDQC-and-Priv-v1.11/riscv-privileged-20190608.pdf">RISC-V Privileged Spec</a></p>
<h2 id="4-实验步骤"><a class="markdownIt-Anchor" href="#4-实验步骤"></a> 4 实验步骤</h2>
<h3 id="41-准备工程"><a class="markdownIt-Anchor" href="#41-准备工程"></a> 4.1 准备工程</h3>
<ul>
<li>
<p>此次实验基于 lab1 同学所实现的代码进行。</p>
</li>
<li>
<p>在 <code>lab1</code> 中我们实现的 <code>puti</code> <code>puts</code> 使用起来较为繁琐，因此在这里我们提供了简化版的 <code>printk</code>。 从 <code>repo</code> 同步以下代码: <code>stddef.h</code> <code>printk.h</code> <code>printk.c</code>，并按如下目录结构放置。<strong>还需要将之前所有 <code>print.h puti puts</code> 的引用修改为 <code>printk.h printk</code></strong>。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── arch</span><br><span class="line">├── include</span><br><span class="line">│   ├── printk.h</span><br><span class="line">│   ├── stddef.h</span><br><span class="line">│   └── types.h</span><br><span class="line">├── init</span><br><span class="line">└── lib</span><br><span class="line">    ├── Makefile</span><br><span class="line">    └── printk.c</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 <code>vmlinux.lds</code> 以及 <code>head.S</code></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 原先的 vmlinux.lds</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.text : ALIGN(0x1000)&#123;</span><br><span class="line">    _stext = .;</span><br><span class="line"></span><br><span class="line">    *(.text.entry)</span><br><span class="line">    *(.text .text.*)</span><br><span class="line">    </span><br><span class="line">    _etext = .;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 修改之后的 vmlinux.lds</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.text : ALIGN(0x1000)&#123;</span><br><span class="line">    _stext = .;</span><br><span class="line"></span><br><span class="line">    *(.text.init)      &lt;- 加入了 .text.init</span><br><span class="line">    *(.text.entry)     &lt;- 之后我们实现 中断处理逻辑 会放置在 .text.entry</span><br><span class="line">    *(.text .text.*)</span><br><span class="line">    </span><br><span class="line">    _etext = .;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 原先的 head.S</span><br><span class="line">extern start_kernel</span><br><span class="line"></span><br><span class="line">    .section .text.entry        &lt;- 之前的 _start 放置在 .text.entry section       </span><br><span class="line">    .globl _start</span><br><span class="line">_start:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    .section .bss.stack</span><br><span class="line">    .globl boot_stack</span><br><span class="line">boot_stack:</span><br><span class="line">    .space 4096</span><br><span class="line"></span><br><span class="line">    .globl boot_stack_top</span><br><span class="line">boot_stack_top:</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 修改之后的 head.S</span><br><span class="line">extern start_kernel</span><br><span class="line"></span><br><span class="line">    .section .text.init         &lt;- 将 _start 放入.text.init section </span><br><span class="line">    .globl _start</span><br><span class="line">_start:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    .section .bss.stack</span><br><span class="line">    .globl boot_stack</span><br><span class="line">boot_stack:</span><br><span class="line">    .space 4096</span><br><span class="line"></span><br><span class="line">    .globl boot_stack_top</span><br><span class="line">boot_stack_top:</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="42-开启异常处理"><a class="markdownIt-Anchor" href="#42-开启异常处理"></a> 4.2 开启异常处理</h3>
<p>在运行 <code>start_kernel</code> 之前，我们要对上面提到的 CSR 进行初始化，初始化包括以下几个步骤：</p>
<ol>
<li>设置 <code>stvec</code>， 将 <code>_traps</code> ( <code>_trap</code> 在 4.3 中实现 ) 所表示的地址写入 <code>stvec</code>，这里我们采用 <code>Direct 模式</code>, 而 <code>_traps</code> 则是中断处理入口函数的基地址。</li>
<li>开启时钟中断，将 <code>sie[STIE]</code> 置 1。</li>
<li>设置第一次时钟中断，参考 <code>clock_set_next_event()</code> ( <code>clock_set_next_event()</code> 在 4.5 中介绍 ) 中的逻辑用汇编实现。</li>
<li>开启 S 态下的中断响应， 将 <code>sstatus[SIE]</code> 置 1。</li>
</ol>
<p>按照下方模版修改 <code>arch/riscv/kernel/head.S</code>， 并补全 <code>_start</code> 中的逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.extern start_kernel</span><br><span class="line"></span><br><span class="line">    .section .text.init</span><br><span class="line">    .globl _start</span><br><span class="line">_start:</span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line"></span><br><span class="line">    # ------------------</span><br><span class="line">        </span><br><span class="line">        # set stvec = _traps</span><br><span class="line">    </span><br><span class="line">    # ------------------</span><br><span class="line">    </span><br><span class="line">        # set sie[STIE] = 1</span><br><span class="line">    </span><br><span class="line">    # ------------------</span><br><span class="line">    </span><br><span class="line">        # set first time interrupt</span><br><span class="line">    </span><br><span class="line">    # ------------------</span><br><span class="line">    </span><br><span class="line">        # set sstatus[SIE] = 1</span><br><span class="line"></span><br><span class="line">    # ------------------</span><br><span class="line">    </span><br><span class="line">    # ------------------</span><br><span class="line">    # - your lab1 code -</span><br><span class="line">    # ------------------</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Debug 提示： 可以先不实现 stvec 和 first time interrupt， 先关注 sie 和 sstatus 是否设置正确。</p>
</blockquote>
<h3 id="43-实现上下文切换"><a class="markdownIt-Anchor" href="#43-实现上下文切换"></a> 4.3 实现上下文切换</h3>
<p>我们要使用汇编实现上下文切换机制， 包含以下几个步骤：</p>
<ol>
<li>在 <code>arch/riscv/kernel/</code> 目录下添加 <code>entry.S</code> 文件。</li>
<li>保存CPU的寄存器（上下文）到内存中（栈上）。</li>
<li>将 <code>scause</code> 和 <code>sepc</code> 中的值传入异常处理函数 <code>trap_handler</code> ( <code>trap_handler</code> 在 4.4 中介绍 ) ，我们将会在 <code>trap_handler</code> 中实现对异常的处理。</li>
<li>在完成对异常的处理之后， 我们从内存中（栈上）恢复CPU的寄存器（上下文）。</li>
<li>从 trap 中返回。</li>
</ol>
<p>按照下方模版修改 <code>arch/riscv/kernel/entry.S</code>， 并补全 <code>_traps</code> 中的逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    .section .text.entry</span><br><span class="line">    .align 2</span><br><span class="line">    .globl _traps </span><br><span class="line">_traps:</span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line">    # -----------</span><br><span class="line"></span><br><span class="line">        # 1. save 32 registers and sepc to stack</span><br><span class="line"></span><br><span class="line">    # -----------</span><br><span class="line"></span><br><span class="line">        # 2. call trap_handler</span><br><span class="line"></span><br><span class="line">    # -----------</span><br><span class="line"></span><br><span class="line">        # 3. restore sepc and 32 registers (x2(sp) should be restore last) from stack</span><br><span class="line"></span><br><span class="line">    # -----------</span><br><span class="line"></span><br><span class="line">        # 4. return from trap</span><br><span class="line"></span><br><span class="line">    # -----------</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Debug 提示： 可以先不实现 call trap_handler， 先实现上写文切换逻辑。通过 gdb 跟踪各个寄存器，确保上下文的 save 与 restore 正确实现并正确返回。</p>
</blockquote>
<h3 id="44-实现异常处理函数"><a class="markdownIt-Anchor" href="#44-实现异常处理函数"></a> 4.4 实现异常处理函数</h3>
<ol>
<li>在 <code>arch/riscv/kernel/</code> 目录下添加 <code>trap.c</code> 文件。</li>
<li>在 <code>trap.c</code> 中实现异常处理函数 <code>trap_handler()</code>, 其接收的两个参数分别是 <code>scause</code> 和 <code>sepc</code> 两个寄存器中的值。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// trap.c </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trap_handler</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> scause, <span class="keyword">unsigned</span> <span class="keyword">long</span> sepc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 `scause` 判断trap类型</span></span><br><span class="line">    <span class="comment">// 如果是interrupt 判断是否是timer interrupt</span></span><br><span class="line">    <span class="comment">// 如果是timer interrupt 则打印输出相关信息, 并通过 `clock_set_next_event()` 设置下一次时钟中断</span></span><br><span class="line">    <span class="comment">// `clock_set_next_event()` 见 4.5 节</span></span><br><span class="line">    <span class="comment">// 其他interrupt / exception 可以直接忽略</span></span><br><span class="line">    </span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="45-实现时钟中断相关函数"><a class="markdownIt-Anchor" href="#45-实现时钟中断相关函数"></a> 4.5 实现时钟中断相关函数</h3>
<ol>
<li>在 <code>arch/riscv/kernel/</code> 目录下添加 <code>clock.c</code> 文件。</li>
<li>在 <code>clock.c</code> 中实现 get_cycles ( ) : 使用 <code>rdtime</code> 汇编指令获得当前 <code>time</code> 寄存器中的值。</li>
<li>在 <code>clock.c</code> 中实现 clock_set_next_event ( ) : 调用 <code>sbi_ecall</code>，设置下一个时钟中断事件。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clock.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QEMU中时钟的频率是10MHz, 也就是1秒钟相当于10000000个时钟周期。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> TIMECLOCK = <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">get_cycles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 rdtime 编写内联汇编，获取 time 寄存器中 (也就是mtime 寄存器 )的值并返回</span></span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clock_set_next_event</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下一次 时钟中断 的时间点</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> next = get_cycles() + TIMECLOCK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sbi_ecall 来完成对下一次时钟中断的设置</span></span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="46-编译及测试"><a class="markdownIt-Anchor" href="#46-编译及测试"></a> 4.6 编译及测试</h3>
<p>由于加入了一些新的 .c 文件，可能需要修改一些Makefile文件，请同学自己尝试修改，使项目可以编译并运行。</p>
<p>下面是一个正确实现的输出样例。（ 仅供参考 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br><span class="line">kernel is running!</span><br><span class="line">[S] Supervisor Mode Timer Interrupt</span><br></pre></td></tr></table></figure>
<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<ol>
<li>在我们使用make run时， OpenSBI 会产生如下输出: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSBI v0.9</span><br><span class="line">____                    _____ ____ _____</span><br><span class="line">/ __ \                  / ____|  _ \_   _|</span><br><span class="line">| |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line">| |  | | <span class="string">&#x27;_ \ / _ \ &#x27;</span>_ \ \___ \|  _ &lt; | |</span><br><span class="line">| |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line">\____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">        | |</span><br><span class="line">        |_|</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Boot HART MIDELEG         : 0x0000000000000222</span><br><span class="line">Boot HART MEDELEG         : 0x000000000000b109</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
通过查看 <code>RISC-V Privileged Spec</code> 中的 <code>medeleg</code> 和 <code>mideleg</code> 解释上面 <code>MIDELEG</code> 值的含义。</li>
</ol>
<h2 id="作业提交"><a class="markdownIt-Anchor" href="#作业提交"></a> 作业提交</h2>
<p>同学需要提交实验报告以及整个工程代码。在提交前请使用 <code>make clean</code> 清除所有构建产物。</p>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJU OS Lab1:RV64 内核引导</title>
    <url>/2021/12/05/Lab1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-实验目的"><a class="markdownIt-Anchor" href="#1-实验目的"></a> 1 实验目的</h2>
<p>学习 RISC-V 汇编， OpenSBI, 以及 Makefile相关知识，编写 head.S 实现跳转到内核运行的第一个 C 函数，调用 OpenSBI 接口完成字符的输出以及编写 Makefile 来完成对整个工程的管理。</p>
<span id="more"></span>
<h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2>
<p>Docker in Lab0</p>
<h2 id="3-实验基础知识介绍"><a class="markdownIt-Anchor" href="#3-实验基础知识介绍"></a> 3 实验基础知识介绍</h2>
<h3 id="31-前置知识"><a class="markdownIt-Anchor" href="#31-前置知识"></a> 3.1 前置知识</h3>
<p>为了顺利完成 OS 实验，我们需要一些前置知识和较多调试技巧。在 OS 实验中我们需要 <strong>RISC-V汇编</strong> 的前置知识，课堂上不会讲授，请同学们通过阅读以下四份文档自学：</p>
<ul>
<li><a href="https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md">RISC-V Assembly Programmer’s Manual</a></li>
<li><a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf">RISC-V Unprivileged Spec</a></li>
<li><a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMFDQC-and-Priv-v1.11/riscv-privileged-20190608.pdf">RISC-V Privileged Spec</a></li>
<li><a href="http://crva.ict.ac.cn/documents/RISC-V-Reader-Chinese-v2p1.pdf">RISC-V 手册（中文）</a></li>
</ul>
<blockquote>
<p>注：RISC-V 手册（中文）中有一些 Typo，请谨慎参考。</p>
</blockquote>
<h3 id="32-risc-v-的三种特权模式"><a class="markdownIt-Anchor" href="#32-risc-v-的三种特权模式"></a> 3.2 RISC-V 的三种特权模式</h3>
<p>RISC-V 有三个特权模式：U (user) 模式、S (supervisor) 模式和 M (machine) 模式。</p>
<table>
<thead>
<tr>
<th>Level</th>
<th>Encoding</th>
<th>Name</th>
<th>Abbreviation</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>00</td>
<td>User/Application</td>
<td>U</td>
</tr>
<tr>
<td>1</td>
<td>01</td>
<td>Supervisor</td>
<td>S</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>Reserved</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>11</td>
<td>Machine</td>
<td>M</td>
</tr>
</tbody>
</table>
<p>其中：</p>
<ul>
<li>M 模式是对硬件操作的抽象，有<strong>最高</strong>级别的权限</li>
<li>S 模式介于 M 模式和 U 模式之间，在操作系统中对应于内核态 (Kernel)。当用户需要内核资源时，向内核申请，并切换到内核态进行处理</li>
<li>U 模式用于执行用户程序，在操作系统中对应于用户态，有<strong>最低</strong>级别的权限</li>
</ul>
<h3 id="33-从计算机上电到-os-运行"><a class="markdownIt-Anchor" href="#33-从计算机上电到-os-运行"></a> 3.3 从计算机上电到 OS 运行</h3>
<p>我们以最基础的嵌入式系统为例，计算机上电后，首先硬件进行一些基础的初始化后，将 CPU 的 Program Counter 移动到内存中 Bootloader 的起始地址。<br />
Bootloader 是操作系统内核运行之前，用于初始化硬件，加载操作系统内核。<br />
在 RISC-V 架构里，Bootloader 运行在 M 模式下。Bootloader 运行完毕后就会把当前模式切换到 S 模式下，机器随后开始运行 Kernel。</p>
<p>这个过程简单而言就是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   Hardware             RISC-V M Mode           RISC-V S Mode </span><br><span class="line">+------------+         +--------------+         +----------+</span><br><span class="line">|  Power On  |  ----&gt;  |  Bootloader  |  ----&gt;  |  Kernel  |</span><br><span class="line">+------------+         +--------------+         +----------+</span><br></pre></td></tr></table></figure>
<h3 id="34-sbi-与-opensbi"><a class="markdownIt-Anchor" href="#34-sbi-与-opensbi"></a> 3.4 SBI 与 OpenSBI</h3>
<p>SBI (Supervisor Binary Interface) 是 S-mode 的 Kernel 和 M-mode 执行环境之间的接口规范，而 OpenSBI 是一个 RISC-V SBI 规范的开源实现。RISC-V 平台和 SoC 供应商可以自主扩展 OpenSBI 实现，以适应特定的硬件配置。</p>
<p>简单的说，为了使操作系统内核适配不同硬件，OpenSBI 提出了一系列规范对 M-mode 下的硬件进行了统一定义，运行在 S-mode 下的内核可以按照这些规范对不同硬件进行操作。</p>
<p><img src="img/riscv-sbi.png" alt="RISC-V SBI 介绍" /></p>
<p>为降低实验难度，我们选择 OpenSBI 作为 Bootloader 来完成机器启动时 M-mode 下的硬件初始化与寄存器设置，并使用 OpenSBI 所提供的接口完成诸如字符打印的操作。</p>
<p>在实验中，QEMU 已经内置了 OpenSBI 作为 Bootloader，我们可以使用 <code>-bios default</code> 启用。如果启用，QEMU 会将 OpenSBI 代码加载到 0x80000000 起始处。OpenSBI 初始化完成后，会跳转到 0x80200000 处（也就是 Kernel 的起始地址）。因此，我们所编译的代码需要放到 0x80200000 处。</p>
<p>如果你对 RISC-V 架构的 Boot 流程有更多的好奇，可以参考这份 <a href="https://riscv.org/wp-content/uploads/2019/12/Summit_bootflow.pdf">bootflow</a>。</p>
<h3 id="35-makefile"><a class="markdownIt-Anchor" href="#35-makefile"></a> 3.5 Makefile</h3>
<p>Makefile 可以简单的认为是一个工程文件的编译规则，描述了整个工程的编译和链接流程。在 Lab0 中我们已经使用了 make 工具利用 Makefile 文件来管理整个工程。在阅读了 <a href="https://seisman.github.io/how-to-write-makefile/introduction.html">Makefile介绍</a> 这一章节后，同学们可以根据工程文件夹里 Makefile 的代码来掌握一些基本的使用技巧。</p>
<h3 id="36-内联汇编"><a class="markdownIt-Anchor" href="#36-内联汇编"></a> 3.6 内联汇编</h3>
<p>内联汇编（通常由 asm 或者 __asm__ 关键字引入）提供了将汇编语言源代码嵌入 C 程序的能力。<br />
内联汇编的详细介绍请参考 <a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">Assembler Instructions with C Expression Operands</a> 。<br />
下面简要介绍一下这次实验会用到的一些内联汇编知识：</p>
<p>内联汇编基本格式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__asm__ <span class="title">volatile</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;instruction1\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;instruction2\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ......</span></span></span><br><span class="line"><span class="params"><span class="function">    ......</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;instruction3\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    : [out1] <span class="string">&quot;=r&quot;</span> (v1),[out2] <span class="string">&quot;=r&quot;</span> (v2)</span></span></span><br><span class="line"><span class="params"><span class="function">    : [in1] <span class="string">&quot;r&quot;</span> (v1), [in2] <span class="string">&quot;r&quot;</span> (v2)</span></span></span><br><span class="line"><span class="params"><span class="function">    : <span class="string">&quot;memory&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>
<p>其中，三个 <code>:</code> 将汇编部分分成了四部分：</p>
<ul>
<li>第一部分是汇编指令，指令末尾需要添加 ‘\n’。</li>
<li>第二部分是输出操作数部分。</li>
<li>第三部分是输入操作数部分。</li>
<li>第四部分是可能影响的寄存器或存储器，用于告知编译器当前内联汇编语句可能会对某些寄存器或内存进行修改，使得编译器在优化时将其因素考虑进去。</li>
</ul>
<p>这四部分中后三部分不是必须的。</p>
<h4 id="示例一"><a class="markdownIt-Anchor" href="#示例一"></a> 示例一</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">s_example</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> type,<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> arg0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ret_val;</span><br><span class="line">    <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mv x10, %[type]\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mv x11, %[arg0]\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mv %[ret_val], x12&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        : [ret_val] <span class="string">&quot;=r&quot;</span> (ret_val)</span></span></span><br><span class="line"><span class="params"><span class="function">        : [type] <span class="string">&quot;r&quot;</span> (type), [arg0] <span class="string">&quot;r&quot;</span> (arg0)</span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;memory&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例一中指令部分，<code>%[type]</code>、<code>%[arg0]</code> 以及 <code>%[ret_val]</code> 代表着特定的寄存器或是内存。</p>
<p>输入输出部分中，<code>[type] &quot;r&quot; (type)</code>代表着将 <code>()</code> 中的变量 <code>type</code> 放入寄存器中（<code>&quot;r&quot;</code> 指放入寄存器，如果是 <code>&quot;m&quot;</code> 则为放入内存），并且绑定到 <code>[]</code> 中命名的符号中去。<code>[ret_val] &quot;=r&quot; (ret_val)</code> 代表着将汇编指令中 <code>%[ret_val]</code> 的值更新到变量 <code>ret_val</code>中。</p>
<h4 id="示例二"><a class="markdownIt-Anchor" href="#示例二"></a> 示例二</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> write_csr(reg, val) (&#123;</span></span><br><span class="line">    <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;csrw &quot;</span> #reg <span class="string">&quot;, %0&quot;</span> :: <span class="string">&quot;r&quot;</span>(val))</span></span>; &#125;)</span><br></pre></td></tr></table></figure>
<p>示例二定义了一个宏，其中 <code>%0</code> 代表着输出输入部分的第一个符号，即 <code>val</code>。</p>
<p><code>#reg</code> 是c语言的一个特殊宏定义语法，相当于将reg进行宏替换并用双引号包裹起来。</p>
<p>例如 <code>write_csr(sstatus,val)</code> 经宏展开会得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">    __asm__ <span class="keyword">volatile</span> (<span class="string">&quot;csrw &quot;</span> <span class="string">&quot;sstatus&quot;</span> <span class="string">&quot;, %0&quot;</span> :: <span class="string">&quot;r&quot;</span>(val)); &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="37-编译相关知识介绍"><a class="markdownIt-Anchor" href="#37-编译相关知识介绍"></a> 3.7 编译相关知识介绍</h3>
<h4 id="vmlinuxlds"><a class="markdownIt-Anchor" href="#vmlinuxlds"></a> vmlinux.lds</h4>
<p>GNU ld 即链接器，用于将 <code>*.o</code> 文件（和库文件）链接成可执行文件。在操作系统开发中，为了指定程序的内存布局，ld 使用链接脚本（Linker Script）来控制，在 Linux Kernel 中链接脚本被命名为 vmlinux.lds。更多关于 ld 的介绍可以使用 <code>man ld</code> 命令。</p>
<p>下面给出一个 vmlinux.lds 的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 目标架构 */</span><br><span class="line">OUTPUT_ARCH( &quot;riscv&quot; )</span><br><span class="line"></span><br><span class="line">/* 程序入口 */</span><br><span class="line">ENTRY( _start )</span><br><span class="line"></span><br><span class="line">/* kernel代码起始位置 */</span><br><span class="line">BASE_ADDR = 0x80200000;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    /* . 代表当前地址 */</span><br><span class="line">    . = BASE_ADDR;</span><br><span class="line"></span><br><span class="line">    /* 记录kernel代码的起始地址 */</span><br><span class="line">    _skernel = .;</span><br><span class="line"></span><br><span class="line">    /* ALIGN(0x1000) 表示4KB对齐 */</span><br><span class="line">    /* _stext, _etext 分别记录了text段的起始与结束地址 */</span><br><span class="line">    .text : ALIGN(0x1000)&#123;</span><br><span class="line">        _stext = .;</span><br><span class="line"></span><br><span class="line">        *(.text.entry)</span><br><span class="line">        *(.text .text.*)</span><br><span class="line">        </span><br><span class="line">        _etext = .;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rodata : ALIGN(0x1000)&#123;</span><br><span class="line">        _srodata = .;</span><br><span class="line"></span><br><span class="line">        *(.rodata .rodata.*)</span><br><span class="line">        </span><br><span class="line">        _erodata = .;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .data : ALIGN(0x1000)&#123;</span><br><span class="line">        _sdata = .;</span><br><span class="line"></span><br><span class="line">        *(.data .data.*)</span><br><span class="line">        </span><br><span class="line">        _edata = .;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bss : ALIGN(0x1000)&#123;</span><br><span class="line">        _sbss = .;</span><br><span class="line"></span><br><span class="line">        *(.bss.stack)</span><br><span class="line">        sbss = .;</span><br><span class="line">        *(.bss .bss.*)</span><br><span class="line">        </span><br><span class="line">        _ebss = .;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 记录kernel代码的结束地址 */</span><br><span class="line">    _ekernel = .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们使用 OUTPUT_ARCH 指定了架构为 RISC-V ，之后使用 ENTRY 指定程序入口点为 <code>_start</code> 函数，程序入口点即程序启动时运行的函数，经过这样的指定后在head.S中需要编写 <code>_start</code> 函数，程序才能正常运行。</p>
<p>链接脚本中有<code>.</code> <code>*</code>两个重要的符号。单独的<code>.</code>在链接脚本代表当前地址，它有赋值、被赋值、自增等操作。而<code>*</code>有两种用法，其一是<code>*()</code>在大括号中表示将所有文件中符合括号内要求的段放置在当前位置，其二是作为通配符。</p>
<p>链接脚本的主体是SECTIONS部分，在这里链接脚本的工作是将程序的各个段按顺序放在各个地址上，在例子中就是从0x80200000地址开始放置了 <code>.text</code> ， <code>.rodata</code> ， <code>.data</code> 和 <code>.bss</code> 段。各个段的作用可以简要概括成：</p>
<table>
<thead>
<tr>
<th>段名</th>
<th>主要作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>.text</td>
<td>通常存放程序执行代码</td>
</tr>
<tr>
<td>.rodata</td>
<td>通常存放常量等只读数据</td>
</tr>
<tr>
<td>.data</td>
<td>通常存放已初始化的全局变量、静态变量</td>
</tr>
<tr>
<td>.bss</td>
<td>通常存放未初始化的全局变量、静态变量</td>
</tr>
</tbody>
</table>
<p>在链接脚本中可以自定义符号，例如以上所有 <code>_s</code> 与  <code>_e</code>开头的符号都是我们自己定义的。</p>
<p>更多有关链接脚本语法可以参考<a href="https://sourceware.org/binutils/docs/ld/Scripts.html">这里</a>。</p>
<h4 id="vmlinux"><a class="markdownIt-Anchor" href="#vmlinux"></a> vmlinux</h4>
<p>vmlinux 通常指 Linux Kernel 编译出的可执行文件 (Executable and Linkable Format / ELF)，特点是未压缩的，带调试信息和符号表的。在整套 OS 实验中，vmlinux 通常指将你的代码进行编译，链接后生成的可供 QEMU 运行的 RV64 架构程序。如果对 vmlinux 使用 <code>file</code> 命令，你将看到如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ file vmlinux </span><br><span class="line">vmlinux: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), statically linked, not stripped</span><br></pre></td></tr></table></figure>
<h4 id="systemmap"><a class="markdownIt-Anchor" href="#systemmap"></a> System.map</h4>
<p>System.map是内核符号表（Kernel Symbol Table）文件，是存储了所有内核符号及其地址的一个列表。“符号”通常指的是函数名，全局变量名等等。使用 <code>nm vmlinux</code> 命令即可打印vmlinux的符号表，符号表的样例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000800 A __vdso_rt_sigreturn</span><br><span class="line">ffffffe000000000 T __init_begin</span><br><span class="line">ffffffe000000000 T _sinittext</span><br><span class="line">ffffffe000000000 T _start</span><br><span class="line">ffffffe000000040 T _start_kernel</span><br><span class="line">ffffffe000000076 t clear_bss</span><br><span class="line">ffffffe000000080 t clear_bss_done</span><br><span class="line">ffffffe0000000c0 t relocate</span><br><span class="line">ffffffe00000017c t set_reset_devices</span><br><span class="line">ffffffe000000190 t debug_kernel</span><br></pre></td></tr></table></figure>
<p>使用 System.map 可以方便地读出函数或变量的地址，为 Debug 提供了方便。</p>
<h2 id="4-实验步骤"><a class="markdownIt-Anchor" href="#4-实验步骤"></a> 4 实验步骤</h2>
<h3 id="41-准备工程"><a class="markdownIt-Anchor" href="#41-准备工程"></a> 4.1 准备工程</h3>
<p>从 <a href="https://gitee.com/zju_xiayingjie/os21fall-stu">repo</a> 同步实验代码框架， 参考 Lab0 中，将工程代码映射进容器中。这样就可以方便的在本地开发，同时使用容器内的工具进行编译。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── arch</span><br><span class="line">│   └── riscv</span><br><span class="line">│       ├── include</span><br><span class="line">│       │   ├── defs.h</span><br><span class="line">│       │   └── sbi.h</span><br><span class="line">│       ├── kernel</span><br><span class="line">│       │   ├── head.S</span><br><span class="line">│       │   ├── Makefile</span><br><span class="line">│       │   ├── sbi.c</span><br><span class="line">│       │   └── vmlinux.lds</span><br><span class="line">│       └── Makefile</span><br><span class="line">├── include</span><br><span class="line">│   ├── print.h</span><br><span class="line">│   └── types.h</span><br><span class="line">├── init</span><br><span class="line">│   ├── main.c</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   └── test.c</span><br><span class="line">├── lib</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   └── print.c</span><br><span class="line">└── Makefile</span><br></pre></td></tr></table></figure>
<p>需要完善以下文件：</p>
<ul>
<li>arch/riscv/kernel/head.S</li>
<li>lib/Makefile</li>
<li>arch/riscv/kernel/sbi.c</li>
<li>lib/print.c</li>
<li>arch/riscv/include/defs.h</li>
</ul>
<h3 id="42-编写heads"><a class="markdownIt-Anchor" href="#42-编写heads"></a> 4.2 编写head.S</h3>
<p>学习riscv的汇编。</p>
<p>完成 arch/riscv/kernel/head.S 。我们首先为即将运行的第一个 C 函数设置程序栈（栈的大小可以设置为4KB），并将该栈放置在<code>.bss.stack</code> 段。接下来我们只需要通过跳转指令，跳转至 main.c 中的 <code>start_kernel</code> 函数即可。</p>
<h3 id="43-完善-makefile-脚本"><a class="markdownIt-Anchor" href="#43-完善-makefile-脚本"></a> 4.3 完善 Makefile 脚本</h3>
<p>阅读文档中关于 <a href="#35-makefile">Makefile</a> 的章节，以及工程文件中的 Makefile 文件，根据注释学会 Makefiel 的使用规则后，补充 <code>lib/Makefile</code>，使工程得以编译。</p>
<p>完成此步后在工程根文件夹执行 make，可以看到工程成功编译出 vmlinux。</p>
<h3 id="44-补充-sbic"><a class="markdownIt-Anchor" href="#44-补充-sbic"></a> 4.4 补充 <code>sbi.c</code></h3>
<p>OpenSBI 在 M 态，为 S 态提供了多种接口，比如字符串输入输出。因此我们需要实现调用 OpenSBI 接口的功能。给出函数定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbiret</span> &#123;</span></span><br><span class="line">	<span class="keyword">long</span> error;</span><br><span class="line">	<span class="keyword">long</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct sbiret <span class="title">sbi_ecall</span><span class="params">(<span class="keyword">int</span> ext, <span class="keyword">int</span> fid, </span></span></span><br><span class="line"><span class="params"><span class="function">                    uint64 arg0, uint64 arg1, uint64 arg2,</span></span></span><br><span class="line"><span class="params"><span class="function">                    uint64 arg3, uint64 arg4, uint64 arg5)</span></span>;</span><br></pre></td></tr></table></figure>
<p>sbi_ecall 函数中，需要完成以下内容：</p>
<ol>
<li>将 ext (Extension ID) 放入寄存器 a7 中，fid (Function ID) 放入寄存器 a6 中，将 arg0 ~ arg5 放入寄存器 a0 ~ a5 中。</li>
<li>使用 <code>ecall</code> 指令。<code>ecall</code> 之后系统会进入 M 模式，之后 OpenSBI 会完成相关操作。</li>
<li>OpenSBI 的返回结果会存放在寄存器 a0 ， a1 中，其中 a0 为 error code， a1 为返回值， 我们用 sbiret 来接受这两个返回值。</li>
</ol>
<p>同学们可以参照内联汇编的示例一完成该函数的编写。<br />
编写成功后，调用 <code>sbi_ecall(0x1, 0x0， 0x30, 0, 0， 0， 0， 0)</code> 将会输出字符’0’。其中<code>0x1</code>代表 <code>sbi_console_putchar</code> 的 ExtensionID，<code>0x0</code>代表FunctionID, 0x30代表’0’的ascii值，其余参数填0。</p>
<p>请在 <code>arch/riscv/kernel/sbi.c</code> 中补充 <code>sbi_ecall()</code>。</p>
<p>下面列出了一些在后续的实验中可能需要使用的功能。</p>
<table>
<thead>
<tr>
<th>Function Name</th>
<th>Function ID</th>
<th>Extension ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>sbi_set_timer （设置时钟相关寄存器）</td>
<td>0</td>
<td>0x00</td>
</tr>
<tr>
<td>sbi_console_putchar （打印字符）</td>
<td>0</td>
<td>0x01</td>
</tr>
<tr>
<td>sbi_console_getchar （接收字符）</td>
<td>0</td>
<td>0x02</td>
</tr>
<tr>
<td>sbi_shutdown （关机）</td>
<td>0</td>
<td>0x08</td>
</tr>
</tbody>
</table>
<h3 id="45-puts-和-puti"><a class="markdownIt-Anchor" href="#45-puts-和-puti"></a> 4.5 <code>puts()</code> 和 <code>puti()</code></h3>
<p>调用以上完成的 <code>sbi_ecall</code> , 完成 <code>puts()</code> 和 <code>puti()</code> 的实现。<br />
<code>puts()</code> 用于打印字符串，<code>puti()</code> 用于打印整型变量。</p>
<p>请编写 <code>lib/print.c</code> 中的 <code>puts()</code> 和 <code>puti()</code>， 函数的相关定义已经写在了 <code>print.h</code> 文件。</p>
<h3 id="46-修改-defs"><a class="markdownIt-Anchor" href="#46-修改-defs"></a> 4.6 修改 defs</h3>
<p>内联汇编的相关知识见<a href="#36">内联汇编</a>。</p>
<p>学习了解了以上知识后，补充 <code>arch/riscv/include/defs.h</code> 中的代码完成：</p>
<p>补充完 <code>read_csr</code> 这个宏定义。这里有相关<a href="#_2">示例</a>。</p>
<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<ol>
<li>请总结一下 RISC-V 的 calling convention，并解释 Caller / Callee Saved Register 有什么区别？</li>
<li>编译之后，通过 System.map 查看 vmlinux.lds 中自定义符号的值</li>
</ol>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/03/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to my personal page!</p>
<span id="more"></span>
<p>I believe simple is beautiful</p>
]]></content>
  </entry>
  <entry>
    <title>本周待办</title>
    <url>/2021/12/10/%E6%9C%AC%E5%91%A8%E5%BE%85%E5%8A%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ekf的思考"><a class="markdownIt-Anchor" href="#ekf的思考"></a> EKF的思考</h2>
<p>根据观测模型公式:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>μ</mi><mi>t</mi></msub><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>μ</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>+</mo><msub><mi>K</mi><mi>t</mi></msub><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mi>t</mi></msub><mo>−</mo><mi>h</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>μ</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi mathvariant="normal">Σ</mi><mi>t</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mi>I</mi><mo>−</mo><msub><mi>K</mi><mi>t</mi></msub><mo>∗</mo><msub><mi>H</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>∗</mo><mover accent="true"><msub><mi mathvariant="normal">Σ</mi><mi>t</mi></msub><mo stretchy="true">‾</mo></mover><mspace linebreak="newline"></mspace><msub><mi>K</mi><mi>t</mi></msub><mo>=</mo><mover accent="true"><msub><mi mathvariant="normal">Σ</mi><mi>t</mi></msub><mo stretchy="true">‾</mo></mover><msubsup><mi>H</mi><mi>t</mi><mi>T</mi></msubsup><mo stretchy="false">(</mo><msub><mi>H</mi><mi>t</mi></msub><mover accent="true"><msub><mi mathvariant="normal">Σ</mi><mi>t</mi></msub><mo stretchy="true">‾</mo></mover><msubsup><mi>H</mi><mi>t</mi><mi>T</mi></msubsup><mo>+</mo><msub><mi>Q</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">
\mu_t = h(\overline{\mu_{t-1}})+K_t*(z_t-h(\overline{\mu_{t-1}}))\\
\Sigma_t=(I-K_t*H_t)*\overline{\Sigma_t}\\
K_t=\overline{\Sigma_t}H_t^T(H_t\overline{\Sigma_t}H_t^T+Q_t)^{-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<span id="more"></span>
<p>我们是否可以在相当程度上认为卡尔曼滤波在本质上也是一个反馈方程？</p>
<p>我们期望得到的值接近观测值的真值，然后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为反馈方程系数。事实上，即使我们不按照上方公式计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，EKF依然可以工作。</p>
<p>因此，为何一定要通过如此复杂的方式计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，需要我继续进行探究。</p>
<h2 id="icp多帧数据融合"><a class="markdownIt-Anchor" href="#icp多帧数据融合"></a> ICP多帧数据融合</h2>
<p>此前我实现了多帧数据融合，但是计算效率并不高。</p>
<p>因此可以尝试将每一帧数据单独完成一次循环，即完成一次特征点匹配、计算T。最后通过与视觉多目相同的方式处理旋转矩阵R，直接求平均值处理t。</p>
<p>理论上，因为数据比较好，所以我并不需要处理粗大误差，不过如果闲得没事可以试试。</p>
<h2 id="视觉里程计"><a class="markdownIt-Anchor" href="#视觉里程计"></a> 视觉里程计</h2>
<p>完成要求，感觉应该不难？同样需要进行多帧融合，不过较机器人学实践多一个要求。</p>
<h2 id="斗地主比赛"><a class="markdownIt-Anchor" href="#斗地主比赛"></a> 斗地主比赛</h2>
<p>98的斗地主比赛我已经说了好久了，不过一直懒得办，就其原因还是杰哥一直摸导致我也想摸。</p>
<h2 id="看番"><a class="markdownIt-Anchor" href="#看番"></a> 看番</h2>
<p>凉宫春日真**好看啊。。。</p>
<h2 id="os实验报告"><a class="markdownIt-Anchor" href="#os实验报告"></a> OS实验报告</h2>
<p>Lab4真真不是人做的。。。</p>
]]></content>
      <tags>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJU OS Lab3:RV64 内核线程调度</title>
    <url>/2021/12/05/Lab3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-实验目的"><a class="markdownIt-Anchor" href="#1-实验目的"></a> 1 实验目的</h2>
<ul>
<li>了解线程概念，并学习线程相关结构体，并实现线程的初始化功能。</li>
<li>了解如何使用时钟中断来实现线程的调度。</li>
<li>了解线程切换原理，并实现线程的切换。</li>
<li>掌握简单的线程调度算法，并完成两种简单调度算法的实现。</li>
</ul>
<span id="more"></span>
<h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2>
<ul>
<li>Docker in Lab0</li>
</ul>
<h2 id="3-背景知识"><a class="markdownIt-Anchor" href="#3-背景知识"></a> 3 背景知识</h2>
<h2 id="31-进程与线程"><a class="markdownIt-Anchor" href="#31-进程与线程"></a> 3.1 进程与线程</h2>
<p><code>源代码</code>经编译器一系列处理（编译、链接、优化等）后得到的可执行文件，我们称之为<code>程序（Program）</code>。而通俗地说，<code>进程</code>就是<code>正在运行并使用计算机资源</code>的程序。<code>进程</code>与<code>程序</code>的不同之处在于，<code>进程</code>是一个动态的概念，其不仅需要将其运行的程序的代码/数据等加载到内存空间中，还需要拥有自己的<code>运行栈</code>。同时一个<code>进程</code>可以对应一个或多个<code>线程</code>，<code>线程</code>之间往往具有相同的代码，共享一块内存，但是却有不同的CPU执行状态。</p>
<p>在本次实验中，为了简单起见， 我们采用 <code>single-threaded process</code> 模型， 即<code>一个进程</code>对应<code>一个线程</code>，进程与线程不做明显区分。</p>
<h2 id="31-线程相关属性"><a class="markdownIt-Anchor" href="#31-线程相关属性"></a> 3.1 线程相关属性</h2>
<p>在不同的操作系统中，为每个线程所保存的信息都不同。在这里，我们提供一种基础的实现，每个线程会包括：</p>
<ul>
<li><code>线程ID</code>：用于唯一确认一个线程。</li>
<li><code>运行栈</code>：每个线程都必须有一个独立的运行栈，保存运行时的数据。</li>
<li><code>执行上下文</code>：当线程不在执行状态时，我们需要保存其上下文（其实就是<code>状态寄存器</code>的值），这样之后才能够将其恢复，继续运行。</li>
<li><code>运行时间片</code>：为每个线程分配的运行时间。</li>
<li><code>优先级</code>：在优先级相关调度时，配合调度算法，来选出下一个执行的线程。</li>
</ul>
<h2 id="32-线程切换流程图"><a class="markdownIt-Anchor" href="#32-线程切换流程图"></a> 3.2 线程切换流程图</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          Process 1         Operating System            Process 2</span><br><span class="line">              +</span><br><span class="line">              |                                            X</span><br><span class="line">P1 executing  |                                            X</span><br><span class="line">              |                                            X</span><br><span class="line">              v Timer Interrupt Trap                       X</span><br><span class="line">              +----------------------&gt;                     X</span><br><span class="line">                                     +                     X</span><br><span class="line">              X                  do_timer()                X</span><br><span class="line">              X                      +                     X</span><br><span class="line">              X                  schedule()                X</span><br><span class="line">              X                      +                     X</span><br><span class="line">              X              save state to PCB1            X</span><br><span class="line">              X                      +                     X</span><br><span class="line">              X           restore state from PCB2          X</span><br><span class="line">              X                      +                     X</span><br><span class="line">              X                      |                     X</span><br><span class="line">              X                      v Timer Interrupt Ret</span><br><span class="line">              X                      +---------------------&gt;</span><br><span class="line">              X                                            |</span><br><span class="line">              X                                            |  P2 executing</span><br><span class="line">              X                                            |</span><br><span class="line">              X                       Timer Interrupt Trap v</span><br><span class="line">              X                      &lt;---------------------+</span><br><span class="line">              X                      +</span><br><span class="line">              X                  do_timer()</span><br><span class="line">              X                      +</span><br><span class="line">              X                  schedule()</span><br><span class="line">              X                      +</span><br><span class="line">              X              save state to PCB2</span><br><span class="line">              X                      +</span><br><span class="line">              X           restore state from PCB1</span><br><span class="line">              X                      +</span><br><span class="line">              X                      |</span><br><span class="line">                Timer Interrupt Ret  v</span><br><span class="line">              &lt;----------------------+</span><br><span class="line">              |</span><br><span class="line">P1 executing  |</span><br><span class="line">              |</span><br><span class="line">              v</span><br></pre></td></tr></table></figure>
<ul>
<li>在每次处理时钟中断时，操作系统首先会将当前线程的运行剩余时间减少一个单位。之后根据调度算法来确定是继续运行还是调度其他线程来执行。</li>
<li>在进程调度时，操作系统会遍历所有可运行的线程，按照一定的调度算法选出下一个执行的线程。最终将选择得到的线程与当前线程切换。</li>
<li>在切换的过程中，首先我们需要保存当前线程的执行上下文，再将将要执行线程的上下文载入到相关寄存器中，至此我们就完成了线程的调度与切换。</li>
</ul>
<h2 id="4-实验步骤"><a class="markdownIt-Anchor" href="#4-实验步骤"></a> 4 实验步骤</h2>
<h3 id="41-准备工程"><a class="markdownIt-Anchor" href="#41-准备工程"></a> 4.1 准备工程</h3>
<ul>
<li>此次实验基于 lab2 同学所实现的代码进行。</li>
<li>从 <code>repo</code> 同步以下代码: <code>rand.h/rand.c</code>, <code>string.h/string.c</code>, <code>mm.h/mm.c</code>。并按照以下步骤将这些文件正确放置。其中 <code>mm.h\mm.c</code> 提供了简单的物理内存管理接口，<code>rand.h\rand.c</code>提供了 <code>rand()</code> 接口用以提供伪随机数序列，<code>string.h/string.c</code>提供了<code>memset</code> 接口用以初始化一段内存空间。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── arch</span><br><span class="line">│   └── riscv</span><br><span class="line">│       ├── include</span><br><span class="line">│       │   └── mm.h</span><br><span class="line">│       └── kernel</span><br><span class="line">│           └── mm.c</span><br><span class="line">├── include</span><br><span class="line">│   ├── rand.h</span><br><span class="line">│   └── string.h</span><br><span class="line">└── lib</span><br><span class="line">    ├── rand.c</span><br><span class="line">    └── string.c</span><br></pre></td></tr></table></figure>
</li>
<li>在 lab3 中我们需要一些物理内存管理的接口，在此我们提供了 <code>kalloc</code> 接口 ( 见<code>mm.c</code> ) 给同学。同学可以用 <code>kalloc</code> 来申请 4KB 的物理页。由于引入了简单的物理内存管理，需要在 <code>_start</code> 的适当位置调用<code>mm_init</code>, 来初始化内存管理系统，并且在初始化时需要用一些自定义的宏，需要修改 <code>defs.h</code>, 在 <code>defs.h</code> <code>添加</code> 如下内容：  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHY_START 0x0000000080000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHY_SIZE  128 * 1024 * 1024 <span class="comment">// 128MB， QEMU 默认内存大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHY_END   (PHY_START + PHY_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PGSIZE 0x1000 <span class="comment">// 4KB</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PGROUNDUP(addr) ((addr + PGSIZE - 1) &amp; (~(PGSIZE - 1)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PGROUNDDOWN(addr) (addr &amp; (~(PGSIZE - 1)))</span></span><br></pre></td></tr></table></figure>
</li>
<li>请在添加/修改上述文件代码之后，确保工程可以正常运行，之后再开始实现 <code>lab3</code> (有可能需要同学自己调整一些头文件的引入)。</li>
<li>在 lab3 中需要同学需要添加并修改 <code>arch/riscv/include/proc.h</code> <code>arch/riscv/kernel/proc.c</code> 两个文件。</li>
<li>本次实验需要实现两种不同的调度算法， 如何控制代码逻辑见 <code>4.4</code></li>
</ul>
<h3 id="42-proch-数据结构定义"><a class="markdownIt-Anchor" href="#42-proch-数据结构定义"></a> 4.2 <code>proc.h</code> 数据结构定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/include/proc.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;types.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NR_TASKS  (1 + 31) <span class="comment">// 用于控制 最大线程数量 （idle 线程 + 31 内核线程）</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_RUNNING    0 <span class="comment">// 为了简化实验，所有的线程都只有一种状态</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRIORITY_MIN 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRIORITY_MAX 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于记录 `线程` 的 `内核栈与用户栈指针` */</span></span><br><span class="line"><span class="comment">/* (lab3中无需考虑，在这里引入是为了之后实验的使用) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    uint64 kernel_sp;</span><br><span class="line">    uint64 user_sp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程状态段数据结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_struct</span> &#123;</span></span><br><span class="line">    uint64 ra;</span><br><span class="line">    uint64 sp;</span><br><span class="line">    uint64 s[<span class="number">12</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程数据结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span>* <span class="title">thread_info</span>;</span></span><br><span class="line">    uint64 state;    <span class="comment">// 线程状态</span></span><br><span class="line">    uint64 counter;  <span class="comment">// 运行剩余时间</span></span><br><span class="line">    uint64 priority; <span class="comment">// 运行优先级 1最低 10最高</span></span><br><span class="line">    uint64 pid;      <span class="comment">// 线程id</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread_struct</span> <span class="title">thread</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程初始化 创建 NR_TASKS 个线程 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task_init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在时钟中断处理中被调用 用于判断是否需要进行调度 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_timer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调度程序 选择出下一个运行的线程 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程切换入口函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">switch_to</span><span class="params">(struct task_struct* next)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* dummy funciton: 一个循环程序，循环输出自己的 pid 以及一个自增的局部变量*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="43-线程调度功能实现"><a class="markdownIt-Anchor" href="#43-线程调度功能实现"></a> 4.3 线程调度功能实现</h3>
<h4 id="431-线程初始化"><a class="markdownIt-Anchor" href="#431-线程初始化"></a> 4.3.1 线程初始化</h4>
<ul>
<li>在初始化线程的时候，我们参考<a href="https://elixir.bootlin.com/linux/0.11/source/kernel/fork.c#L93">Linux v0.11中的实现</a>为每个线程分配一个 4KB 的物理页，我们将 <code>task_struct</code> 存放在该页的低地址部分， 将线程的栈指针 <code>sp</code> 指向该页的高地址。具体内存布局如下图所示：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                ┌─────────────┐◄─── High Address</span><br><span class="line">                │             │</span><br><span class="line">                │    stack    │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">          sp ──►├──────┬──────┤</span><br><span class="line">                │      │      │</span><br><span class="line">                │      ▼      │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">4KB Page        │             │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                ├─────────────┤</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                │ task_struct │</span><br><span class="line">                │             │</span><br><span class="line">                │             │</span><br><span class="line">                └─────────────┘◄─── Low Address</span><br></pre></td></tr></table></figure>
</li>
<li>当我们的 OS run 起来时候，其本身就是一个线程 <code>idle 线程</code>，但是我们并没有为它设计好 <code>task_struct</code>。所以第一步我们要为 <code>idle</code> 设置 <code>task_struct</code>。并将 <code>current</code>, <code>task[0]</code> 都指向 <code>idle</code>。</li>
<li>为了方便起见，我们将 <code>task[1]</code> ~ <code>task[NR_TASKS - 1]</code>, 全部初始化， 这里和 <code>idle</code> 设置的区别在于要为这些线程设置 <code>thread_struct</code> 中的 <code>ra</code> 和 <code>sp</code>.</li>
<li>在 <code>_start</code> 适当的位置调用 <code>task_init</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">void</span> __dummy();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>* <span class="title">idle</span>;</span>           <span class="comment">// idle process</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>* <span class="title">current</span>;</span>        <span class="comment">// 指向当前运行线程的 `task_struct`</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>* <span class="title">task</span>[<span class="title">NR_TASKS</span>];</span> <span class="comment">// 线程数组，所有的线程都保存在此</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 调用 kalloc() 为 idle 分配一个物理页</span></span><br><span class="line">    <span class="comment">// 2. 设置 state 为 TASK_RUNNING;</span></span><br><span class="line">    <span class="comment">// 3. 由于 idle 不参与调度 可以将其 counter / priority 设置为 0</span></span><br><span class="line">    <span class="comment">// 4. 设置 idle 的 pid 为 0</span></span><br><span class="line">    <span class="comment">// 5. 将 current 和 task[0] 指向 idle</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 参考 idle 的设置, 为 task[1] ~ task[NR_TASKS - 1] 进行初始化</span></span><br><span class="line">    <span class="comment">// 2. 其中每个线程的 state 为 TASK_RUNNING, counter 为 0, priority 使用 rand() 来设置, pid 为该线程在线程数组中的下标。</span></span><br><span class="line">    <span class="comment">// 3. 为 task[1] ~ task[NR_TASKS - 1] 设置 `thread_struct` 中的 `ra` 和 `sp`,</span></span><br><span class="line">    <span class="comment">// 4. 其中 `ra` 设置为 __dummy （见 4.3.2）的地址， `sp` 设置为 该线程申请的物理页的高地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printk</span>(<span class="string">&quot;...proc_init done!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Debug 提示：</p>
<ol>
<li>修改 <code>proc.h</code> 中的 <code>NR_TASKS</code> 为一个比较小的值, 比如 5， 这样 除去 <code>task[0]</code> ( idle )，只需要初始化 4 个线程，方便调试。</li>
<li>注意以上的修改只是为了在做实验的过程中方便调试，最后一定记住要修改回去！！！</li>
</ol>
</blockquote>
<h4 id="432-__dummy-与-dummy-介绍"><a class="markdownIt-Anchor" href="#432-__dummy-与-dummy-介绍"></a> 4.3.2 <code>__dummy</code> 与 <code>dummy</code> 介绍</h4>
<ul>
<li><code>task[1]</code> ~ <code>task[NR_TASKS - 1]</code>都运行同一段代码 <code>dummy()</code> 我们在 <code>proc.c</code> 添加 <code>dummy()</code>:  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    uint64 MOD = <span class="number">1000000007</span>;</span><br><span class="line">    uint64 auto_inc_local_var = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last_counter = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (last_counter == <span class="number">-1</span> || current-&gt;counter != last_counter) &#123;</span><br><span class="line">            last_counter = current-&gt;counter;</span><br><span class="line">            auto_inc_local_var = (auto_inc_local_var + <span class="number">1</span>) % MOD;</span><br><span class="line">            <span class="built_in">printk</span>(<span class="string">&quot;[PID = %d] is running. auto_inc_local_var = %d\n&quot;</span>, current-&gt;pid, auto_inc_local_var);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Debug 提示： 可以修改 printk 打印更多的信息</p>
</blockquote>
<ul>
<li>
<p>当线程在运行时，由于时钟中断的触发，会将当前运行线程的上下文环境保存在栈上 ( lab2 中实现的 <code>_traps</code> )。 当线程再次被调度时，会将上下文从栈上恢复，但是当我们创建一个新的线程，此时线程的栈为空，当这个线程被调度时，是没有上下文需要被恢复的，所以我们需要为线程<code>第一次调度</code>提供一个特殊的返回函数 <code>__dummy</code></p>
</li>
<li>
<p>在 <code>entry.S</code> 添加 <code>__dummy</code></p>
<ul>
<li>在<code>__dummy</code> 中将 sepc 设置为 <code>dummy()</code> 的地址, 并使用 <code>sret</code> 从中断中返回。</li>
<li><code>__dummy</code> 与 <code>_traps</code>的 <code>restore</code>部分相比， 其实就是省略了从栈上恢复上下文的过程 （ 但是手动设置了 <code>sepc</code> ）。</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># arch/riscv/kernel/entry.S</span><br><span class="line"></span><br><span class="line">    .global __dummy</span><br><span class="line">__dummy:</span><br><span class="line">    # YOUR CODE HERE</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="433-实现线程切换"><a class="markdownIt-Anchor" href="#433-实现线程切换"></a> 4.3.3 实现线程切换</h4>
<ul>
<li>判断下一个执行的线程 <code>next</code> 与当前的线程 <code>current</code> 是否为同一个线程，如果是同一个线程，则无需做任何处理，否则调用 <code>__switch_to</code> 进行线程切换。  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">void</span> __switch_to(struct task_struct* prev, struct task_struct* next);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">switch_to</span><span class="params">(struct task_struct* next)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>在 <code>entry.S</code> 中实现线程上下文切换 <code>__switch_to</code>:
<ul>
<li><code>__switch_to</code>接受两个 <code>task_struct</code> 指针作为参数</li>
<li>保存当前线程的<code>ra</code>, <code>sp</code>, <code>s0~s11</code>到当前线程的 <code>thread_struct</code> 中</li>
<li>将下一个线程的 <code>thread_struct</code> 中的相关数据载入到<code>ra</code>, <code>sp</code>, <code>s0~s11</code>中。</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># arch/riscv/kernel/entry.S</span><br><span class="line"></span><br><span class="line">    .globl __switch_to</span><br><span class="line">__switch_to:</span><br><span class="line">    # save state to prev process</span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line"></span><br><span class="line">    # restore state from next process</span><br><span class="line">    # YOUR CODE HERE</span><br><span class="line"></span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Debug 提示： 可以尝试是否可以从 idle 正确切换到 process 1</p>
</blockquote>
<h4 id="434-实现调度入口函数"><a class="markdownIt-Anchor" href="#434-实现调度入口函数"></a> 4.3.4 实现调度入口函数</h4>
<ul>
<li>实现 <code>do_timer()</code>, 并在 <code>时钟中断处理函数</code> 中调用。  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_timer</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 1. 如果当前线程是 idle 线程 直接进行调度 */</span></span><br><span class="line">    <span class="comment">/* 2. 如果当前线程不是 idle 对当前线程的运行剩余时间减 1 </span></span><br><span class="line"><span class="comment">          若剩余时间任然大于0 则直接返回 否则进行调度 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="435-实现线程调度"><a class="markdownIt-Anchor" href="#435-实现线程调度"></a> 4.3.5 实现线程调度</h4>
<p>本次实验我们需要实现两种调度算法：1.短作业优先调度算法，2.优先级调度算法。</p>
<h5 id="4351-短作业优先调度算法"><a class="markdownIt-Anchor" href="#4351-短作业优先调度算法"></a> 4.3.5.1 短作业优先调度算法</h5>
<ul>
<li>
<p>当需要进行调度时按照一下规则进行调度：</p>
<ul>
<li>遍历线程指针数组<code>task</code>(不包括 <code>idle</code> ，即 <code>task[0]</code> )，在所有运行状态 (<code>TASK_RUNNING</code>) 下的线程运行剩余时间<code>最少</code>的线程作为下一个执行的线程。</li>
<li>如果<code>所有</code>运行状态下的线程运行剩余时间都为0，则对 <code>task[1]</code> ~ <code>task[NR_TASKS-1]</code> 的运行剩余时间重新赋值 (使用 <code>rand()</code>) ，之后再重新进行调度。</li>
</ul>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Debug 提示： 将 <code>NR_TASKS</code> 改为较小的值，调用 <code>printk</code> 将所有线程的信息打印出来。</p>
</blockquote>
</li>
</ul>
<h5 id="4352-优先级调度算法"><a class="markdownIt-Anchor" href="#4352-优先级调度算法"></a> 4.3.5.2 优先级调度算法</h5>
<ul>
<li>参考 <a href="https://elixir.bootlin.com/linux/0.11/source/kernel/sched.c#L122">Linux v0.11 调度算法实现</a> 实现。  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="44-编译及测试"><a class="markdownIt-Anchor" href="#44-编译及测试"></a> 4.4 编译及测试</h3>
<ul>
<li>
<p>由于加入了一些新的 .c 文件，可能需要修改一些Makefile文件，请同学自己尝试修改，使项目可以编译并运行。</p>
</li>
<li>
<p>由于本次实验需要完成两个调度算法，因此需要两种调度算法可以使用<a href="https://www.rapidtables.com/code/linux/gcc/gcc-d.html"><code>gcc –D</code></a>选项进行控制。</p>
<ul>
<li>DSJF （短作业优先调度）。</li>
<li>DPRIORITY （优先级调度）。</li>
<li>在<code>proc.c</code>中使用 <code>#ifdef</code> , <code>#endif</code> 来控制代码。 修改Makefile中的 <code>CFLAG = $&#123;CF&#125; $&#123;INCLUDE&#125; -DSJF / -DPRIORITY</code> (作业提交的时候 <code>Makefile</code> 选择任意一个都可以)</li>
</ul>
</li>
<li>
<p>短作业优先调度输出示例 (为了便于展示，这里一共只初始化了 4 个线程) 同学们最后提交时需要 保证 NR_TASKS 为 32 不变</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSBI v0.9</span><br><span class="line">  ____                    _____ ____ _____</span><br><span class="line"> / __ \                  / ____|  _ \_   _|</span><br><span class="line">| |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line">| |  | | <span class="string">&#x27;_ \ / _ \ &#x27;</span>_ \ \___ \|  _ &lt; | |</span><br><span class="line">| |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line"> \____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">       | |</span><br><span class="line">       |_|</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Boot HART MIDELEG         : 0x0000000000000222</span><br><span class="line">Boot HART MEDELEG         : 0x000000000000b109</span><br><span class="line"></span><br><span class="line">...mm_init <span class="keyword">done</span>!</span><br><span class="line">...proc_init <span class="keyword">done</span>!</span><br><span class="line">Hello RISC-V</span><br><span class="line">idle process is running!</span><br><span class="line"></span><br><span class="line">SET [PID = 1 COUNTER = 10]</span><br><span class="line">SET [PID = 2 COUNTER = 10]</span><br><span class="line">SET [PID = 3 COUNTER = 5]</span><br><span class="line">SET [PID = 4 COUNTER = 2]</span><br><span class="line"></span><br><span class="line">switch to [PID = 4 COUNTER = 2]</span><br><span class="line">[PID = 4] is running. auto_inc_local_var = 1</span><br><span class="line">[PID = 4] is running. auto_inc_local_var = 2</span><br><span class="line"></span><br><span class="line">switch to [PID = 3 COUNTER = 5]</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 1</span><br><span class="line">.....</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 5</span><br><span class="line"></span><br><span class="line">switch to [PID = 2 COUNTER = 10]</span><br><span class="line">[PID = 2] is running. auto_inc_local_var = 1</span><br><span class="line">...</span><br><span class="line">[PID = 2] is running. auto_inc_local_var = 10</span><br><span class="line"></span><br><span class="line">switch to [PID = 1 COUNTER = 10]</span><br><span class="line">[PID = 1] is running. auto_inc_local_var = 1</span><br><span class="line">...</span><br><span class="line">[PID = 1] is running. auto_inc_local_var = 10</span><br><span class="line"></span><br><span class="line">SET [PID = 1 COUNTER = 9]</span><br><span class="line">SET [PID = 2 COUNTER = 4]</span><br><span class="line">SET [PID = 3 COUNTER = 4]</span><br><span class="line">SET [PID = 4 COUNTER = 10]</span><br><span class="line"></span><br><span class="line">switch to [PID = 3 COUNTER = 4]</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 6</span><br><span class="line">...</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 9</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>优先级调度输出示例</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSBI v0.9</span><br><span class="line">  ____                    _____ ____ _____</span><br><span class="line"> / __ \                  / ____|  _ \_   _|</span><br><span class="line">| |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line">| |  | | <span class="string">&#x27;_ \ / _ \ &#x27;</span>_ \ \___ \|  _ &lt; | |</span><br><span class="line">| |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line"> \____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">       | |</span><br><span class="line">       |_|</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Boot HART MIDELEG         : 0x0000000000000222</span><br><span class="line">Boot HART MEDELEG         : 0x000000000000b109</span><br><span class="line"></span><br><span class="line">...mm_init <span class="keyword">done</span>!</span><br><span class="line">...proc_init <span class="keyword">done</span>!</span><br><span class="line">Hello RISC-V</span><br><span class="line">idle process is running!</span><br><span class="line"></span><br><span class="line">SET [PID = 1 PRIORITY = 1 COUNTER = 1]</span><br><span class="line">SET [PID = 2 PRIORITY = 4 COUNTER = 4]</span><br><span class="line">SET [PID = 3 PRIORITY = 10 COUNTER = 10]</span><br><span class="line">SET [PID = 4 PRIORITY = 4 COUNTER = 4]</span><br><span class="line"></span><br><span class="line">switch to [PID = 3 PRIORITY = 10 COUNTER = 10]</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 1</span><br><span class="line">...</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 10</span><br><span class="line"></span><br><span class="line">switch to [PID = 4 PRIORITY = 4 COUNTER = 4]</span><br><span class="line">[PID = 4] is running. auto_inc_local_var = 1</span><br><span class="line">...</span><br><span class="line">[PID = 4] is running. auto_inc_local_var = 4</span><br><span class="line"></span><br><span class="line">switch to [PID = 2 PRIORITY = 4 COUNTER = 4]</span><br><span class="line">[PID = 2] is running. auto_inc_local_var = 1</span><br><span class="line">...</span><br><span class="line">[PID = 2] is running. auto_inc_local_var = 4</span><br><span class="line"></span><br><span class="line">switch to [PID = 1 PRIORITY = 1 COUNTER = 1]</span><br><span class="line">[PID = 1] is running. auto_inc_local_var = 1</span><br><span class="line"></span><br><span class="line">SET [PID = 1 PRIORITY = 1 COUNTER = 1]</span><br><span class="line">SET [PID = 2 PRIORITY = 4 COUNTER = 4]</span><br><span class="line">SET [PID = 3 PRIORITY = 10 COUNTER = 10]</span><br><span class="line">SET [PID = 4 PRIORITY = 4 COUNTER = 4]</span><br><span class="line"></span><br><span class="line">switch to [PID = 3 PRIORITY = 10 COUNTER = 10]</span><br><span class="line">[PID = 3] is running. auto_inc_local_var = 11</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h1>
<ol>
<li>
<p>在 RV64 中一共用 32 个通用寄存器， 为什么 <code>context_switch</code> 中只保存了14个 ？</p>
</li>
<li>
<p>当线程第一次调用时， 其 <code>ra</code> 所代表的返回点是 <code>__dummy</code>。 那么在之后的线程调用中 <code>context_switch</code> 中，<code>ra</code> 保存/恢复的函数返回点是什么呢 ？ 请同学用gdb尝试追踪一次完整的线程切换流程， 并关注每一次 <code>ra</code> 的变换。</p>
</li>
</ol>
<h2 id="作业提交"><a class="markdownIt-Anchor" href="#作业提交"></a> 作业提交</h2>
<p>同学需要提交实验报告以及整个工程代码。在提交前请使用 <code>make clean</code> 清除所有构建产物。</p>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJU OS Lab4:RV64 虚拟内存管理</title>
    <url>/2021/12/09/Lab4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-实验目的"><a class="markdownIt-Anchor" href="#1-实验目的"></a> 1 实验目的</h2>
<ul>
<li>学习虚拟内存的相关知识，实现物理地址到虚拟地址的切换。</li>
<li>了解 RISC-V 架构中 SV39 分页模式，实现虚拟地址到物理地址的映射，并对不同的段进行相应的权限设置。</li>
</ul>
<span id="more"></span>
<h2 id="2-实验环境"><a class="markdownIt-Anchor" href="#2-实验环境"></a> 2 实验环境</h2>
<ul>
<li>Docker in Lab0</li>
</ul>
<h2 id="3-背景知识"><a class="markdownIt-Anchor" href="#3-背景知识"></a> 3 背景知识</h2>
<h3 id="30-前言"><a class="markdownIt-Anchor" href="#30-前言"></a> 3.0 前言</h3>
<p>在 <a href="./lab3.md">lab3</a> 中我们赋予了 OS 对多个线程调度以及并发执行的能力，由于目前这些线程都是内核线程，因此他们可以共享运行空间，即运行不同线程对空间的修改是相互可见的。但是如果我们需要线程相互<strong>隔离</strong>，以及在多线程的情况下更加<strong>高效</strong>的使用内存，我们必须引入<code>虚拟内存</code>这个概念。</p>
<p>虚拟内存可以为正在运行的进程提供独立的内存空间，制造一种每个进程的内存都是独立的假象。同时虚拟内存到物理内存的映射也包含了对内存的访问权限，方便 Kernel 完成权限检查。</p>
<p>在本次实验中，我们需要关注 OS 如何<strong>开启虚拟地址</strong>以及通过设置页表来实现<strong>地址映射</strong>和<strong>权限控制</strong>。</p>
<h3 id="31-kernel-的虚拟内存布局"><a class="markdownIt-Anchor" href="#31-kernel-的虚拟内存布局"></a> 3.1 Kernel 的虚拟内存布局</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start_address           end_address</span><br><span class="line">    0x0                 0x3fffffffff</span><br><span class="line">     │                       │</span><br><span class="line">┌────┘                 ┌─────┘</span><br><span class="line">↓        256G          ↓                                </span><br><span class="line">┌───────────────────────┬──────────┬────────────────┐</span><br><span class="line">│      User Space       │    ...   │  Kernel Space  │</span><br><span class="line">└───────────────────────┴──────────┴────────────────┘</span><br><span class="line">                                    ↑    256G      ↑</span><br><span class="line">                      ┌─────────────┘              │ </span><br><span class="line">                      │                            │</span><br><span class="line">              0xffffffc000000000          0xffffffffffffffff</span><br><span class="line">                start_address                 end_address</span><br></pre></td></tr></table></figure>
<p>通过上图我们可以看到 RV64 将 <code>0x0000004000000000</code> 以下的虚拟空间作为 <code>user space</code>。 将 <code>0xffffffc000000000</code> 及以上的虚拟空间作为 <code>kernel space</code>。由于我们还未引入用户态程序，目前我们只需要关注 <code>kernel space</code>。</p>
<p>具体的虚拟内存布局可以<a href="https://elixir.bootlin.com/linux/v5.15/source/Documentation/riscv/vm-layout.rst">参考这里</a></p>
<p>在 <code>kernel space</code> 中有一段区域被称为 <code>direct mapping area</code>， 为了方便 kernel 可以高效率的访问 RAM， kernel 会预先把所有物理内存都映射至这一块区域 ( PA + OFFSET == VA )， 这种映射也被称为 <code>linear mapping</code>。在 RISC-V Linux Kernel 中这一段区域为 <code>0xffffffe000000000 ~ 0xffffffff00000000</code>, 共 124 GB 。</p>
<h3 id="32-risc-v-virtual-memory-system-sv39"><a class="markdownIt-Anchor" href="#32-risc-v-virtual-memory-system-sv39"></a> 3.2 RISC-V Virtual-Memory System (Sv39)</h3>
<h4 id="321-satp-registersupervisor-address-translation-and-protection-register"><a class="markdownIt-Anchor" href="#321-satp-registersupervisor-address-translation-and-protection-register"></a> 3.2.1 <code>satp</code> Register（Supervisor Address Translation and Protection Register）</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">63</span>      <span class="number">60</span> <span class="number">59</span>                  <span class="number">44</span> <span class="number">43</span>                                <span class="number">0</span></span><br><span class="line"> ---------------------------------------------------------------------</span><br><span class="line">|   MODE   |         ASID         |                PPN                |</span><br><span class="line"> ---------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<ul>
<li>MODE 字段的取值如下图：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                         RV <span class="number">64</span></span><br><span class="line"> ----------------------------------------------------------</span><br><span class="line">|  Value  |  Name  |  Description                          |</span><br><span class="line">|----------------------------------------------------------|</span><br><span class="line">|    <span class="number">0</span>    | Bare   | No translation <span class="keyword">or</span> protection          |</span><br><span class="line">|  <span class="number">1</span> - <span class="number">7</span>  | ---    | Reserved <span class="keyword">for</span> standard use             |</span><br><span class="line">|    <span class="number">8</span>    | Sv39   | Page-based <span class="number">39</span> bit <span class="keyword">virtual</span> addressing  | &lt;-- 我们使用的mode</span><br><span class="line">|    <span class="number">9</span>    | Sv48   | Page-based <span class="number">48</span> bit <span class="keyword">virtual</span> addressing  |</span><br><span class="line">|    <span class="number">10</span>   | Sv57   | Page-based <span class="number">57</span> bit <span class="keyword">virtual</span> addressing  |</span><br><span class="line">|    <span class="number">11</span>   | Sv64   | Page-based <span class="number">64</span> bit <span class="keyword">virtual</span> addressing  |</span><br><span class="line">| <span class="number">12</span> - <span class="number">13</span> | ---    | Reserved <span class="keyword">for</span> standard use             |</span><br><span class="line">| <span class="number">14</span> - <span class="number">15</span> | ---    | Reserved <span class="keyword">for</span> standard use             |</span><br><span class="line"> -----------------------------------------------------------</span><br></pre></td></tr></table></figure>
<ul>
<li>ASID ( Address Space Identifier ) ： 此次实验中直接置 0 即可。</li>
<li>PPN ( Physical Page Number ) ：顶级页表的物理页号。我们的物理页的大小为 4KB， PA &gt;&gt; 12 == PPN。</li>
<li>具体介绍请阅读 <a href="https://www.five-embeddev.com/riscv-isa-manual/latest/supervisor.html#sec:satp">RISC-V Privileged Spec 4.1.10</a></li>
</ul>
<h4 id="322-risc-v-sv39-virtual-address-and-physical-address"><a class="markdownIt-Anchor" href="#322-risc-v-sv39-virtual-address-and-physical-address"></a> 3.2.2 RISC-V Sv39 Virtual Address and Physical Address</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">38</span>        <span class="number">30</span> <span class="number">29</span>        <span class="number">21</span> <span class="number">20</span>        <span class="number">12</span> <span class="number">11</span>                           <span class="number">0</span></span><br><span class="line"> ---------------------------------------------------------------------</span><br><span class="line">|   VPN[<span class="number">2</span>]   |   VPN[<span class="number">1</span>]   |   VPN[<span class="number">0</span>]   |          page offset         |</span><br><span class="line"> ---------------------------------------------------------------------</span><br><span class="line">                        Sv39 <span class="keyword">virtual</span> address</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">55</span>                <span class="number">30</span> <span class="number">29</span>        <span class="number">21</span> <span class="number">20</span>        <span class="number">12</span> <span class="number">11</span>                           <span class="number">0</span></span><br><span class="line"> -----------------------------------------------------------------------------</span><br><span class="line">|       PPN[<span class="number">2</span>]       |   PPN[<span class="number">1</span>]   |   PPN[<span class="number">0</span>]   |          page offset         |</span><br><span class="line"> -----------------------------------------------------------------------------</span><br><span class="line">                            Sv39 physical address</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Sv39 模式定义物理地址有 56 位，虚拟地址有 64 位。但是，虚拟地址的 64 位只有低 39 位有效，通过 虚拟内存布局图我们可以发现 其 63-39 位 为 0 时代表 user space address， 为 1 时 代表 kernel space address。Sv39 支持三级页表结构，VPN[2-0](Virtual Page Number)分别代表每级页表的<code>虚拟页号</code>，PPN[2-0](Physical Page Number)分别代表每级页表的<code>物理页号</code>。物理地址和虚拟地址的低12位表示页内偏移（page offset）。</li>
<li>具体介绍请阅读 <a href="https://www.five-embeddev.com/riscv-isa-manual/latest/supervisor.html#sec:sv39">RISC-V Privileged Spec 4.4.1</a></li>
</ul>
<h4 id="323-risc-v-sv39-page-table-entry"><a class="markdownIt-Anchor" href="#323-risc-v-sv39-page-table-entry"></a> 3.2.3 RISC-V Sv39 Page Table Entry</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">63</span>      <span class="number">54</span> <span class="number">53</span>        <span class="number">28</span> <span class="number">27</span>        <span class="number">19</span> <span class="number">18</span>        <span class="number">10</span> <span class="number">9</span>   <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> -----------------------------------------------------------------------</span><br><span class="line">| Reserved |   PPN[<span class="number">2</span>]   |   PPN[<span class="number">1</span>]   |   PPN[<span class="number">0</span>]   | RSW |D|A|G|U|X|W|R|V|</span><br><span class="line"> -----------------------------------------------------------------------</span><br><span class="line">                                                     |   | | | | | | | |</span><br><span class="line">                                                     |   | | | | | | | `---- V - Valid</span><br><span class="line">                                                     |   | | | | | | `------ R - Readable</span><br><span class="line">                                                     |   | | | | | `-------- W - Writable</span><br><span class="line">                                                     |   | | | | `---------- X - Executable</span><br><span class="line">                                                     |   | | | `------------ U - User</span><br><span class="line">                                                     |   | | `-------------- G - Global</span><br><span class="line">                                                     |   | `---------------- A - Accessed</span><br><span class="line">                                                     |   `------------------ D - Dirty (<span class="number">0</span> in page directory)</span><br><span class="line">                                                     `---------------------- Reserved <span class="keyword">for</span> supervisor software</span><br></pre></td></tr></table></figure>
<ul>
<li>0 ～ 9 bit: protection bits
<ul>
<li>V : 有效位，当 V = 0, 访问该PTE会产生Pagefault。</li>
<li>R : R = 1 该页可读。</li>
<li>W : W = 1 该页可写。</li>
<li>X : X = 1 该页可执行。</li>
<li>U , G , A , D , RSW 本次实验中设置为 0 即可。</li>
</ul>
</li>
<li>具体介绍请阅读 <a href="https://www.five-embeddev.com/riscv-isa-manual/latest/supervisor.html#sec:sv39">RISC-V Privileged Spec 4.4.1</a></li>
</ul>
<h4 id="324-risc-v-address-translation"><a class="markdownIt-Anchor" href="#324-risc-v-address-translation"></a> 3.2.4 RISC-V Address Translation</h4>
<p>虚拟地址转化为物理地址流程图如下，具体描述见 <a href="https://www.five-embeddev.com/riscv-isa-manual/latest/supervisor.html#sv32algorithm">RISC-V Privileged Spec 4.3.2</a> :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                Virtual Address                                     Physical Address</span><br><span class="line"></span><br><span class="line">                          9             9            9              12          55        12 11       0</span><br><span class="line">   ┌────────────────┬────────────┬────────────┬─────────────┬────────────────┐ ┌────────────┬──────────┐</span><br><span class="line">   │                │   VPN[2]   │   VPN[1]   │   VPN[0]    │     OFFSET     │ │     PPN    │  OFFSET  │</span><br><span class="line">   └────────────────┴────┬───────┴─────┬──────┴──────┬──────┴───────┬────────┘ └────────────┴──────────┘</span><br><span class="line">                         │             │             │              │                 ▲          ▲</span><br><span class="line">                         │             │             │              │                 │          │</span><br><span class="line">                         │             │             │              │                 │          │</span><br><span class="line">┌────────────────────────┘             │             │              │                 │          │</span><br><span class="line">│                                      │             │              │                 │          │</span><br><span class="line">│                                      │             │              └─────────────────┼──────────┘</span><br><span class="line">│    ┌─────────────────┐               │             │                                │</span><br><span class="line">│511 │                 │  ┌────────────┘             │                                │</span><br><span class="line">│    │                 │  │                          │                                │</span><br><span class="line">│    │                 │  │     ┌─────────────────┐  │                                │</span><br><span class="line">│    │                 │  │ 511 │                 │  │                                │</span><br><span class="line">│    │                 │  │     │                 │  │                                │</span><br><span class="line">│    │                 │  │     │                 │  │     ┌─────────────────┐        │</span><br><span class="line">│    │   44       10   │  │     │                 │  │ 511 │                 │        │</span><br><span class="line">│    ├────────┬────────┤  │     │                 │  │     │                 │        │</span><br><span class="line">└───►│   PPN  │  flags │  │     │                 │  │     │                 │        │</span><br><span class="line">     ├────┬───┴────────┤  │     │   44       10   │  │     │                 │        │</span><br><span class="line">     │    │            │  │     ├────────┬────────┤  │     │                 │        │</span><br><span class="line">     │    │            │  └────►│   PPN  │  flags │  │     │                 │        │</span><br><span class="line">     │    │            │        ├────┬───┴────────┤  │     │   44       10   │        │</span><br><span class="line">     │    │            │        │    │            │  │     ├────────┬────────┤        │</span><br><span class="line">   1 │    │            │        │    │            │  └────►│   PPN  │  flags │        │</span><br><span class="line">     │    │            │        │    │            │        ├────┬───┴────────┤        │</span><br><span class="line">   0 │    │            │        │    │            │        │    │            │        │</span><br><span class="line">     └────┼────────────┘      1 │    │            │        │    │            │        │</span><br><span class="line">     ▲    │                     │    │            │        │    └────────────┼────────┘</span><br><span class="line">     │    │                   0 │    │            │        │                 │</span><br><span class="line">     │    └────────────────────►└────┼────────────┘      1 │                 │</span><br><span class="line">     │                               │                     │                 │</span><br><span class="line"> ┌───┴────┐                          │                   0 │                 │</span><br><span class="line"> │  satp  │                          └────────────────────►└─────────────────┘</span><br><span class="line"> └────────┘</span><br></pre></td></tr></table></figure>
<h2 id="4-实验步骤"><a class="markdownIt-Anchor" href="#4-实验步骤"></a> 4 实验步骤</h2>
<h3 id="41-准备工程"><a class="markdownIt-Anchor" href="#41-准备工程"></a> 4.1 准备工程</h3>
<ul>
<li>此次实验基于 lab3 同学所实现的代码进行。</li>
<li>需要修改 <code>defs.h</code>, 在 <code>defs.h</code> <code>添加</code> 如下内容：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPENSBI_SIZE (0x200000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VM_START (0xffffffe000000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VM_END   (0xffffffff00000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VM_SIZE  (VM_END - VM_START)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA2VA_OFFSET (VM_START - PHY_START)</span></span><br></pre></td></tr></table></figure>
</li>
<li>从 <code>repo</code> 同步以下代码: <code>vmlinux.lds.S</code>, <code>Makefile</code>。并按照以下步骤将这些文件正确放置。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── arch</span><br><span class="line">    └── riscv</span><br><span class="line">        └── kernel</span><br><span class="line">            ├── Makefile</span><br><span class="line">            └── vmlinux.lds.S</span><br></pre></td></tr></table></figure>
这里我们通过 <code>vmlinux.lds.S</code> 模版生成 <code>vmlinux.lds</code>文件。链接脚本中的 <code>ramv</code> 代表 <code>LMA ( Virtual Memory Address )</code>即虚拟地址， <code>ram</code> 则代表 <code>LMA ( Load Memory Address )</code>, 即我们 OS image 被 load 的地址，可以理解为物理地址。使用以上的 vmlinux.lds 进行编译之后，得到的 <code>System.map</code> 以及 <code>vmlinux</code> 采用的都是虚拟地址，方便之后 Debug。</li>
</ul>
<h3 id="42-开启虚拟内存映射"><a class="markdownIt-Anchor" href="#42-开启虚拟内存映射"></a> 4.2 开启虚拟内存映射。</h3>
<p>在 RISC-V 中开启虚拟地址被分为了两步： <code>setup_vm</code> 以及 <code>setup_vm_final</code>，下面将介绍相关的具体实现。</p>
<h4 id="421-setup_vm-的实现"><a class="markdownIt-Anchor" href="#421-setup_vm-的实现"></a> 4.2.1 <code>setup_vm</code> 的实现</h4>
<ul>
<li>将 0x80000000 开始的 1GB 区域进行两次映射，其中一次是等值映射 ( PA == VA ) ，另一次是将其映射至高地址 ( PA + PV2VA_OFFSET == VA )。如下图所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Physical Address</span><br><span class="line">-------------------------------------------</span><br><span class="line">                     | OpenSBI | Kernel |</span><br><span class="line">-------------------------------------------</span><br><span class="line">                     ^</span><br><span class="line">                0x80000000</span><br><span class="line">                     ├───────────────────────────────────────────────────┐</span><br><span class="line">                     |                                                   |</span><br><span class="line">Virtual Address      ↓                                                   ↓</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">                     | OpenSBI | Kernel |                                | OpenSBI | Kernel |</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">                     ^                                                   ^</span><br><span class="line">                0x80000000                                       0xffffffe000000000</span><br></pre></td></tr></table></figure>
</li>
<li>完成上述映射之后，通过 <code>relocate</code>函数，完成对 <code>satp</code>的设置，以及跳转到对应的虚拟地址。</li>
<li>至此我们已经完成了虚拟地址的开启，之后我们运行的代码也都将在虚拟地址上运行。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/vm.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* early_pgtbl: 用于 setup_vm 进行 1GB 的 映射。 */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>  early_pgtbl[<span class="number">512</span>] __attribute__((__aligned__(<span class="number">0x1000</span>)));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_vm</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1. 由于是进行 1GB 的映射 这里不需要使用多级页表 </span></span><br><span class="line"><span class="comment">    2. 将 va 的 64bit 作为如下划分： | high bit | 9 bit | 30 bit |</span></span><br><span class="line"><span class="comment">        high bit 可以忽略</span></span><br><span class="line"><span class="comment">        中间9 bit 作为 early_pgtbl 的 index</span></span><br><span class="line"><span class="comment">        低 30 bit 作为 页内偏移 这里注意到 30 = 9 + 9 + 12， 即我们只使用根页表， 根页表的每个 entry 都对应 1GB 的区域。 </span></span><br><span class="line"><span class="comment">    3. Page Table Entry 的权限 V | R | W | X 位设置为 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># head.S</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    call setup_vm</span><br><span class="line">    call relocate</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    j start_kernel</span><br><span class="line"></span><br><span class="line">relocate:</span><br><span class="line">    # set ra = ra + PA2VA_OFFSET</span><br><span class="line">    # set sp = sp + PA2VA_OFFSET (If you have set the sp before)</span><br><span class="line">   </span><br><span class="line">    ###################### </span><br><span class="line">    #   YOUR CODE HERE   #</span><br><span class="line">    ######################</span><br><span class="line"></span><br><span class="line">    # set satp with early_pgtbl</span><br><span class="line">    </span><br><span class="line">    ###################### </span><br><span class="line">    #   YOUR CODE HERE   #</span><br><span class="line">    ######################</span><br><span class="line">    </span><br><span class="line">    # flush tlb</span><br><span class="line">    sfence.vma zero, zero</span><br><span class="line"></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">    .section .bss.stack</span><br><span class="line">    .globl boot_stack</span><br><span class="line">boot_stack:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Hint 1: <code>sfence.vma</code> 指令用于刷新 TLB</p>
<p>Hint 2: 在 set satp 前，我们只可以使用<strong>物理地址</strong>来打断点。设置 satp 之后，才可以使用虚拟地址打断点，同时之前设置的物理地址断点也会失效，需要删除。</p>
</blockquote>
<h4 id="422-setup_vm_final-的实现"><a class="markdownIt-Anchor" href="#422-setup_vm_final-的实现"></a> 4.2.2 <code>setup_vm_final</code> 的实现</h4>
<ul>
<li>
<p>由于 setup_vm_final 中需要申请页面的接口， 应该在其之前完成内存管理初始化， 可能需要修改 mm.c 中的代码，mm.c 中初始化的函数接收的起始结束地址需要调整为虚拟地址。</p>
</li>
<li>
<p>对 所有物理内存 (128M) 进行映射，并设置正确的权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Physical Address</span><br><span class="line">     PHY_START                           PHY_END</span><br><span class="line">         ↓                                  ↓</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">         | OpenSBI | Kernel |               |</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">         ^                                  ^</span><br><span class="line">    0x80000000                              └───────────────────────────────────────────────────┐</span><br><span class="line">         └───────────────────────────────────────────────────┐                                  |</span><br><span class="line">                                                             |                                  |</span><br><span class="line">                                                          VM_START                              |</span><br><span class="line">Virtual Address                                              ↓                                  ↓</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">                                                             | OpenSBI | Kernel |               |</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">                                                             ^</span><br><span class="line">                                                     0xffffffe000000000</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>不再需要进行等值映射</p>
</li>
<li>
<p>不再需要将 OpenSBI 的映射至高地址，因为 OpenSBI 运行在 M 态， 直接使用的物理地址。</p>
</li>
<li>
<p>采用三级页表映射。</p>
</li>
<li>
<p>在 head.S 中 适当的位置调用 setup_vm_final 。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/riscv/kernel/vm.c </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* swapper_pg_dir: kernel pagetable 根目录， 在 setup_vm_final 进行映射。 */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>  swapper_pg_dir[<span class="number">512</span>] __attribute__((__aligned__(<span class="number">0x1000</span>)));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_vm_final</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(swapper_pg_dir, <span class="number">0x0</span>, PGSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No OpenSBI mapping required</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapping kernel text X|-|R|V</span></span><br><span class="line">    create_mapping(...);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapping kernel rodata -|-|R|V</span></span><br><span class="line">    create_mapping(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mapping other memory -|W|R|V</span></span><br><span class="line">    create_mapping(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set satp with swapper_pg_dir</span></span><br><span class="line"></span><br><span class="line">    YOUR CODE HERE</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flush TLB</span></span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;sfence.vma zero, zero&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建多级页表映射关系 */</span></span><br><span class="line">create_mapping(uint64 *pgtbl, uint64 va, uint64 pa, uint64 sz, <span class="keyword">int</span> perm) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    pgtbl 为根页表的基地址</span></span><br><span class="line"><span class="comment">    va, pa 为需要映射的虚拟地址、物理地址</span></span><br><span class="line"><span class="comment">    sz 为映射的大小</span></span><br><span class="line"><span class="comment">    perm 为映射的读写权限</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    创建多级页表的时候可以使用 kalloc() 来获取一页作为页表目录</span></span><br><span class="line"><span class="comment">    可以使用 V bit 来判断页表项是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="43-编译及测试"><a class="markdownIt-Anchor" href="#43-编译及测试"></a> 4.3 编译及测试</h3>
<ul>
<li>由于加入了一些新的 .c 文件，可能需要修改一些Makefile文件，请同学自己尝试修改，使项目可以编译并运行。</li>
<li>输出示例  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSBI v0.9</span><br><span class="line">  ____                    _____ ____ _____</span><br><span class="line"> / __ \                  / ____|  _ \_   _|</span><br><span class="line">| |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line">| |  | | <span class="string">&#x27;_ \ / _ \ &#x27;</span>_ \ \___ \|  _ &lt; | |</span><br><span class="line">| |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line"> \____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">       | |</span><br><span class="line">       |_|</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Boot HART MIDELEG         : 0x0000000000000222</span><br><span class="line">Boot HART MEDELEG         : 0x000000000000b109</span><br><span class="line"></span><br><span class="line">...mm_init <span class="keyword">done</span>!</span><br><span class="line">...proc_init <span class="keyword">done</span>!</span><br><span class="line">Hello RISC-V</span><br><span class="line">idle process is running!</span><br><span class="line"></span><br><span class="line">switch to [PID = 28 COUNTER = 1] </span><br><span class="line">[PID = 28] is running! thread space begin at 0xffffffe007fa2000</span><br><span class="line"></span><br><span class="line">switch to [PID = 12 COUNTER = 1] </span><br><span class="line">[PID = 12] is running! thread space begin at 0xffffffe007fb2000</span><br><span class="line"></span><br><span class="line">switch to [PID = 14 COUNTER = 2] </span><br><span class="line">[PID = 14] is running! thread space begin at 0xffffffe007fb0000</span><br><span class="line">[PID = 14] is running! thread space begin at 0xffffffe007fb0000</span><br><span class="line"></span><br><span class="line">switch to [PID = 9 COUNTER = 2] </span><br><span class="line">[PID = 9] is running! thread space begin at 0xffffffe007fb5000</span><br><span class="line">[PID = 9] is running! thread space begin at 0xffffffe007fb5000</span><br><span class="line"></span><br><span class="line">switch to [PID = 2 COUNTER = 2] </span><br><span class="line">[PID = 2] is running! thread space begin at 0xffffffe007fbc000</span><br><span class="line">[PID = 2] is running! thread space begin at 0xffffffe007fbc000</span><br><span class="line"></span><br><span class="line">switch to [PID = 1 COUNTER = 2] </span><br><span class="line">[PID = 1] is running! thread space begin at 0xffffffe007fbd000</span><br><span class="line">[PID = 1] is running! thread space begin at 0xffffffe007fbd000</span><br><span class="line"></span><br><span class="line">switch to [PID = 29 COUNTER = 3] </span><br><span class="line">[PID = 29] is running! thread space begin at 0xffffffe007fa1000</span><br><span class="line">[PID = 29] is running! thread space begin at 0xffffffe007fa1000</span><br><span class="line">[PID = 29] is running! thread space begin at 0xffffffe007fa1000</span><br><span class="line"></span><br><span class="line">switch to [PID = 11 COUNTER = 3] </span><br><span class="line">[PID = 11] is running! thread space begin at 0xffffffe007fb3000</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<ol>
<li>验证 <code>.text</code>, <code>.rodata</code> 段的属性是否成功设置，给出截图。</li>
<li>为什么我们在 <code>setup_vm</code> 中需要做等值映射?</li>
<li>在 Linux 中，是不需要做等值映射的。请探索一下不在 <code>setup_vm</code> 中做等值映射的方法。</li>
</ol>
<h2 id="作业提交"><a class="markdownIt-Anchor" href="#作业提交"></a> 作业提交</h2>
<p>同学需要提交实验报告以及整个工程代码。在提交前请使用 <code>make clean</code> 清除所有构建产物。</p>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
